/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "user.h"

@implementation GetHomeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHomeRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHomeRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetHomeResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIs_self: (BOOL) is_self host_id: (int64_t) host_id host_name: (NSString *) host_name host_avatar: (NSString *) host_avatar host_domain: (NSString *) host_domain host_desc: (NSString *) host_desc host_gender: (int32_t) host_gender banner_photo: (NSString *) banner_photo dynamic_count: (int32_t) dynamic_count follow_count: (int32_t) follow_count follower_count: (int32_t) follower_count follow_state: (int32_t) follow_state address: (NSString *) address gift: (int32_t) gift photograph_type: (int32_t) photograph_type photograph_address: (NSMutableArray *) photograph_address
{
  self = [super init];
  __is_self = is_self;
  __is_self_isset = YES;
  __host_id = host_id;
  __host_id_isset = YES;
  __host_name = [host_name retain_stub];
  __host_name_isset = YES;
  __host_avatar = [host_avatar retain_stub];
  __host_avatar_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __host_desc = [host_desc retain_stub];
  __host_desc_isset = YES;
  __host_gender = host_gender;
  __host_gender_isset = YES;
  __banner_photo = [banner_photo retain_stub];
  __banner_photo_isset = YES;
  __dynamic_count = dynamic_count;
  __dynamic_count_isset = YES;
  __follow_count = follow_count;
  __follow_count_isset = YES;
  __follower_count = follower_count;
  __follower_count_isset = YES;
  __follow_state = follow_state;
  __follow_state_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __gift = gift;
  __gift_isset = YES;
  __photograph_type = photograph_type;
  __photograph_type_isset = YES;
  __photograph_address = [photograph_address retain_stub];
  __photograph_address_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"is_self"])
  {
    __is_self = [decoder decodeBoolForKey: @"is_self"];
    __is_self_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_id"])
  {
    __host_id = [decoder decodeInt64ForKey: @"host_id"];
    __host_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_name"])
  {
    __host_name = [[decoder decodeObjectForKey: @"host_name"] retain_stub];
    __host_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_avatar"])
  {
    __host_avatar = [[decoder decodeObjectForKey: @"host_avatar"] retain_stub];
    __host_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_desc"])
  {
    __host_desc = [[decoder decodeObjectForKey: @"host_desc"] retain_stub];
    __host_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_gender"])
  {
    __host_gender = [decoder decodeInt32ForKey: @"host_gender"];
    __host_gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"banner_photo"])
  {
    __banner_photo = [[decoder decodeObjectForKey: @"banner_photo"] retain_stub];
    __banner_photo_isset = YES;
  }
  if ([decoder containsValueForKey: @"dynamic_count"])
  {
    __dynamic_count = [decoder decodeInt32ForKey: @"dynamic_count"];
    __dynamic_count_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_count"])
  {
    __follow_count = [decoder decodeInt32ForKey: @"follow_count"];
    __follow_count_isset = YES;
  }
  if ([decoder containsValueForKey: @"follower_count"])
  {
    __follower_count = [decoder decodeInt32ForKey: @"follower_count"];
    __follower_count_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"gift"])
  {
    __gift = [decoder decodeInt32ForKey: @"gift"];
    __gift_isset = YES;
  }
  if ([decoder containsValueForKey: @"photograph_type"])
  {
    __photograph_type = [decoder decodeInt32ForKey: @"photograph_type"];
    __photograph_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"photograph_address"])
  {
    __photograph_address = [[decoder decodeObjectForKey: @"photograph_address"] retain_stub];
    __photograph_address_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__is_self_isset)
  {
    [encoder encodeBool: __is_self forKey: @"is_self"];
  }
  if (__host_id_isset)
  {
    [encoder encodeInt64: __host_id forKey: @"host_id"];
  }
  if (__host_name_isset)
  {
    [encoder encodeObject: __host_name forKey: @"host_name"];
  }
  if (__host_avatar_isset)
  {
    [encoder encodeObject: __host_avatar forKey: @"host_avatar"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__host_desc_isset)
  {
    [encoder encodeObject: __host_desc forKey: @"host_desc"];
  }
  if (__host_gender_isset)
  {
    [encoder encodeInt32: __host_gender forKey: @"host_gender"];
  }
  if (__banner_photo_isset)
  {
    [encoder encodeObject: __banner_photo forKey: @"banner_photo"];
  }
  if (__dynamic_count_isset)
  {
    [encoder encodeInt32: __dynamic_count forKey: @"dynamic_count"];
  }
  if (__follow_count_isset)
  {
    [encoder encodeInt32: __follow_count forKey: @"follow_count"];
  }
  if (__follower_count_isset)
  {
    [encoder encodeInt32: __follower_count forKey: @"follower_count"];
  }
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__gift_isset)
  {
    [encoder encodeInt32: __gift forKey: @"gift"];
  }
  if (__photograph_type_isset)
  {
    [encoder encodeInt32: __photograph_type forKey: @"photograph_type"];
  }
  if (__photograph_address_isset)
  {
    [encoder encodeObject: __photograph_address forKey: @"photograph_address"];
  }
}

- (void) dealloc
{
  [__host_name release_stub];
  [__host_avatar release_stub];
  [__host_domain release_stub];
  [__host_desc release_stub];
  [__banner_photo release_stub];
  [__address release_stub];
  [__photograph_address release_stub];
  [super dealloc_stub];
}

- (BOOL) is_self {
  return __is_self;
}

- (void) setIs_self: (BOOL) is_self {
  __is_self = is_self;
  __is_self_isset = YES;
}

- (BOOL) is_selfIsSet {
  return __is_self_isset;
}

- (void) unsetIs_self {
  __is_self_isset = NO;
}

- (int64_t) host_id {
  return __host_id;
}

- (void) setHost_id: (int64_t) host_id {
  __host_id = host_id;
  __host_id_isset = YES;
}

- (BOOL) host_idIsSet {
  return __host_id_isset;
}

- (void) unsetHost_id {
  __host_id_isset = NO;
}

- (NSString *) host_name {
  return [[__host_name retain_stub] autorelease_stub];
}

- (void) setHost_name: (NSString *) host_name {
  [host_name retain_stub];
  [__host_name release_stub];
  __host_name = host_name;
  __host_name_isset = YES;
}

- (BOOL) host_nameIsSet {
  return __host_name_isset;
}

- (void) unsetHost_name {
  [__host_name release_stub];
  __host_name = nil;
  __host_name_isset = NO;
}

- (NSString *) host_avatar {
  return [[__host_avatar retain_stub] autorelease_stub];
}

- (void) setHost_avatar: (NSString *) host_avatar {
  [host_avatar retain_stub];
  [__host_avatar release_stub];
  __host_avatar = host_avatar;
  __host_avatar_isset = YES;
}

- (BOOL) host_avatarIsSet {
  return __host_avatar_isset;
}

- (void) unsetHost_avatar {
  [__host_avatar release_stub];
  __host_avatar = nil;
  __host_avatar_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (NSString *) host_desc {
  return [[__host_desc retain_stub] autorelease_stub];
}

- (void) setHost_desc: (NSString *) host_desc {
  [host_desc retain_stub];
  [__host_desc release_stub];
  __host_desc = host_desc;
  __host_desc_isset = YES;
}

- (BOOL) host_descIsSet {
  return __host_desc_isset;
}

- (void) unsetHost_desc {
  [__host_desc release_stub];
  __host_desc = nil;
  __host_desc_isset = NO;
}

- (int32_t) host_gender {
  return __host_gender;
}

- (void) setHost_gender: (int32_t) host_gender {
  __host_gender = host_gender;
  __host_gender_isset = YES;
}

- (BOOL) host_genderIsSet {
  return __host_gender_isset;
}

- (void) unsetHost_gender {
  __host_gender_isset = NO;
}

- (NSString *) banner_photo {
  return [[__banner_photo retain_stub] autorelease_stub];
}

- (void) setBanner_photo: (NSString *) banner_photo {
  [banner_photo retain_stub];
  [__banner_photo release_stub];
  __banner_photo = banner_photo;
  __banner_photo_isset = YES;
}

- (BOOL) banner_photoIsSet {
  return __banner_photo_isset;
}

- (void) unsetBanner_photo {
  [__banner_photo release_stub];
  __banner_photo = nil;
  __banner_photo_isset = NO;
}

- (int32_t) dynamic_count {
  return __dynamic_count;
}

- (void) setDynamic_count: (int32_t) dynamic_count {
  __dynamic_count = dynamic_count;
  __dynamic_count_isset = YES;
}

- (BOOL) dynamic_countIsSet {
  return __dynamic_count_isset;
}

- (void) unsetDynamic_count {
  __dynamic_count_isset = NO;
}

- (int32_t) follow_count {
  return __follow_count;
}

- (void) setFollow_count: (int32_t) follow_count {
  __follow_count = follow_count;
  __follow_count_isset = YES;
}

- (BOOL) follow_countIsSet {
  return __follow_count_isset;
}

- (void) unsetFollow_count {
  __follow_count_isset = NO;
}

- (int32_t) follower_count {
  return __follower_count;
}

- (void) setFollower_count: (int32_t) follower_count {
  __follower_count = follower_count;
  __follower_count_isset = YES;
}

- (BOOL) follower_countIsSet {
  return __follower_count_isset;
}

- (void) unsetFollower_count {
  __follower_count_isset = NO;
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (int32_t) gift {
  return __gift;
}

- (void) setGift: (int32_t) gift {
  __gift = gift;
  __gift_isset = YES;
}

- (BOOL) giftIsSet {
  return __gift_isset;
}

- (void) unsetGift {
  __gift_isset = NO;
}

- (int32_t) photograph_type {
  return __photograph_type;
}

- (void) setPhotograph_type: (int32_t) photograph_type {
  __photograph_type = photograph_type;
  __photograph_type_isset = YES;
}

- (BOOL) photograph_typeIsSet {
  return __photograph_type_isset;
}

- (void) unsetPhotograph_type {
  __photograph_type_isset = NO;
}

- (NSMutableArray *) photograph_address {
  return [[__photograph_address retain_stub] autorelease_stub];
}

- (void) setPhotograph_address: (NSMutableArray *) photograph_address {
  [photograph_address retain_stub];
  [__photograph_address release_stub];
  __photograph_address = photograph_address;
  __photograph_address_isset = YES;
}

- (BOOL) photograph_addressIsSet {
  return __photograph_address_isset;
}

- (void) unsetPhotograph_address {
  [__photograph_address release_stub];
  __photograph_address = nil;
  __photograph_address_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_self: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setHost_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHost_gender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBanner_photo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDynamic_count: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_count: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollower_count: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGift: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPhotograph_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setPhotograph_address: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHomeResponse"];
  if (__is_self_isset) {
    [outProtocol writeFieldBeginWithName: @"is_self" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __is_self];
    [outProtocol writeFieldEnd];
  }
  if (__host_id_isset) {
    [outProtocol writeFieldBeginWithName: @"host_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __host_id];
    [outProtocol writeFieldEnd];
  }
  if (__host_name_isset) {
    if (__host_name != nil) {
      [outProtocol writeFieldBeginWithName: @"host_name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __host_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_avatar_isset) {
    if (__host_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"host_avatar" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __host_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_desc_isset) {
    if (__host_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"host_desc" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __host_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_gender_isset) {
    [outProtocol writeFieldBeginWithName: @"host_gender" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __host_gender];
    [outProtocol writeFieldEnd];
  }
  if (__banner_photo_isset) {
    if (__banner_photo != nil) {
      [outProtocol writeFieldBeginWithName: @"banner_photo" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __banner_photo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dynamic_count_isset) {
    [outProtocol writeFieldBeginWithName: @"dynamic_count" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __dynamic_count];
    [outProtocol writeFieldEnd];
  }
  if (__follow_count_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_count" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __follow_count];
    [outProtocol writeFieldEnd];
  }
  if (__follower_count_isset) {
    [outProtocol writeFieldBeginWithName: @"follower_count" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __follower_count];
    [outProtocol writeFieldEnd];
  }
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gift_isset) {
    [outProtocol writeFieldBeginWithName: @"gift" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __gift];
    [outProtocol writeFieldEnd];
  }
  if (__photograph_type_isset) {
    [outProtocol writeFieldBeginWithName: @"photograph_type" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __photograph_type];
    [outProtocol writeFieldEnd];
  }
  if (__photograph_address_isset) {
    if (__photograph_address != nil) {
      [outProtocol writeFieldBeginWithName: @"photograph_address" type: TType_LIST fieldID: 16];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__photograph_address count]];
        int idx4;
        for (idx4 = 0; idx4 < [__photograph_address count]; idx4++)
        {
          [outProtocol writeString: [__photograph_address objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHomeResponse("];
  [ms appendString: @"is_self:"];
  [ms appendFormat: @"%i", __is_self];
  [ms appendString: @",host_id:"];
  [ms appendFormat: @"%qi", __host_id];
  [ms appendString: @",host_name:"];
  [ms appendFormat: @"\"%@\"", __host_name];
  [ms appendString: @",host_avatar:"];
  [ms appendFormat: @"\"%@\"", __host_avatar];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",host_desc:"];
  [ms appendFormat: @"\"%@\"", __host_desc];
  [ms appendString: @",host_gender:"];
  [ms appendFormat: @"%i", __host_gender];
  [ms appendString: @",banner_photo:"];
  [ms appendFormat: @"\"%@\"", __banner_photo];
  [ms appendString: @",dynamic_count:"];
  [ms appendFormat: @"%i", __dynamic_count];
  [ms appendString: @",follow_count:"];
  [ms appendFormat: @"%i", __follow_count];
  [ms appendString: @",follower_count:"];
  [ms appendFormat: @"%i", __follower_count];
  [ms appendString: @",follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",gift:"];
  [ms appendFormat: @"%i", __gift];
  [ms appendString: @",photograph_type:"];
  [ms appendFormat: @"%i", __photograph_type];
  [ms appendString: @",photograph_address:"];
  [ms appendFormat: @"%@", __photograph_address];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetTopUserRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTopUserRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTopUserRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetTopUserResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGift: (int32_t) gift user_name: (NSString *) user_name user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain
{
  self = [super init];
  __gift = gift;
  __gift_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gift"])
  {
    __gift = [decoder decodeInt32ForKey: @"gift"];
    __gift_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gift_isset)
  {
    [encoder encodeInt32: __gift forKey: @"gift"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [super dealloc_stub];
}

- (int32_t) gift {
  return __gift;
}

- (void) setGift: (int32_t) gift {
  __gift = gift;
  __gift_isset = YES;
}

- (BOOL) giftIsSet {
  return __gift_isset;
}

- (void) unsetGift {
  __gift_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGift: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetTopUserResponse"];
  if (__gift_isset) {
    [outProtocol writeFieldBeginWithName: @"gift" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gift];
    [outProtocol writeFieldEnd];
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetTopUserResponse("];
  [ms appendString: @"gift:"];
  [ms appendFormat: @"%i", __gift];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FollowRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session follow_id: (int64_t) follow_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __follow_id = follow_id;
  __follow_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_id"])
  {
    __follow_id = [decoder decodeInt64ForKey: @"follow_id"];
    __follow_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__follow_id_isset)
  {
    [encoder encodeInt64: __follow_id forKey: @"follow_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) follow_id {
  return __follow_id;
}

- (void) setFollow_id: (int64_t) follow_id {
  __follow_id = follow_id;
  __follow_id_isset = YES;
}

- (BOOL) follow_idIsSet {
  return __follow_id_isset;
}

- (void) unsetFollow_id {
  __follow_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFollow_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FollowRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__follow_id_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __follow_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FollowRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",follow_id:"];
  [ms appendFormat: @"%qi", __follow_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FollowResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFollow_state: (int32_t) follow_state
{
  self = [super init];
  __follow_state = follow_state;
  __follow_state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FollowResponse"];
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FollowResponse("];
  [ms appendString: @"follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UnFollowRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session follow_id: (int64_t) follow_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __follow_id = follow_id;
  __follow_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_id"])
  {
    __follow_id = [decoder decodeInt64ForKey: @"follow_id"];
    __follow_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__follow_id_isset)
  {
    [encoder encodeInt64: __follow_id forKey: @"follow_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) follow_id {
  return __follow_id;
}

- (void) setFollow_id: (int64_t) follow_id {
  __follow_id = follow_id;
  __follow_id_isset = YES;
}

- (BOOL) follow_idIsSet {
  return __follow_id_isset;
}

- (void) unsetFollow_id {
  __follow_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFollow_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UnFollowRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__follow_id_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __follow_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UnFollowRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",follow_id:"];
  [ms appendFormat: @"%qi", __follow_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UnFollowResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFollow_state: (int32_t) follow_state
{
  self = [super init];
  __follow_state = follow_state;
  __follow_state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UnFollowResponse"];
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UnFollowResponse("];
  [ms appendString: @"follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FollowUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_id: (int64_t) user_id user_name: (NSString *) user_name user_desc: (NSString *) user_desc user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain user_gender: (int32_t) user_gender user_address: (NSString *) user_address follow_state: (int32_t) follow_state follow_date: (NSString *) follow_date
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_desc = [user_desc retain_stub];
  __user_desc_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  __user_gender = user_gender;
  __user_gender_isset = YES;
  __user_address = [user_address retain_stub];
  __user_address_isset = YES;
  __follow_state = follow_state;
  __follow_state_isset = YES;
  __follow_date = [follow_date retain_stub];
  __follow_date_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_desc"])
  {
    __user_desc = [[decoder decodeObjectForKey: @"user_desc"] retain_stub];
    __user_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_gender"])
  {
    __user_gender = [decoder decodeInt32ForKey: @"user_gender"];
    __user_gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_address"])
  {
    __user_address = [[decoder decodeObjectForKey: @"user_address"] retain_stub];
    __user_address_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_date"])
  {
    __follow_date = [[decoder decodeObjectForKey: @"follow_date"] retain_stub];
    __follow_date_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_desc_isset)
  {
    [encoder encodeObject: __user_desc forKey: @"user_desc"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
  if (__user_gender_isset)
  {
    [encoder encodeInt32: __user_gender forKey: @"user_gender"];
  }
  if (__user_address_isset)
  {
    [encoder encodeObject: __user_address forKey: @"user_address"];
  }
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
  if (__follow_date_isset)
  {
    [encoder encodeObject: __follow_date forKey: @"follow_date"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_desc release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [__user_address release_stub];
  [__follow_date release_stub];
  [super dealloc_stub];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_desc {
  return [[__user_desc retain_stub] autorelease_stub];
}

- (void) setUser_desc: (NSString *) user_desc {
  [user_desc retain_stub];
  [__user_desc release_stub];
  __user_desc = user_desc;
  __user_desc_isset = YES;
}

- (BOOL) user_descIsSet {
  return __user_desc_isset;
}

- (void) unsetUser_desc {
  [__user_desc release_stub];
  __user_desc = nil;
  __user_desc_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (int32_t) user_gender {
  return __user_gender;
}

- (void) setUser_gender: (int32_t) user_gender {
  __user_gender = user_gender;
  __user_gender_isset = YES;
}

- (BOOL) user_genderIsSet {
  return __user_gender_isset;
}

- (void) unsetUser_gender {
  __user_gender_isset = NO;
}

- (NSString *) user_address {
  return [[__user_address retain_stub] autorelease_stub];
}

- (void) setUser_address: (NSString *) user_address {
  [user_address retain_stub];
  [__user_address release_stub];
  __user_address = user_address;
  __user_address_isset = YES;
}

- (BOOL) user_addressIsSet {
  return __user_address_isset;
}

- (void) unsetUser_address {
  [__user_address release_stub];
  __user_address = nil;
  __user_address_isset = NO;
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (NSString *) follow_date {
  return [[__follow_date retain_stub] autorelease_stub];
}

- (void) setFollow_date: (NSString *) follow_date {
  [follow_date retain_stub];
  [__follow_date release_stub];
  __follow_date = follow_date;
  __follow_date_isset = YES;
}

- (BOOL) follow_dateIsSet {
  return __follow_date_isset;
}

- (void) unsetFollow_date {
  [__follow_date release_stub];
  __follow_date = nil;
  __follow_date_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUser_gender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_address: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFollow_date: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FollowUser"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_desc_isset) {
    if (__user_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"user_desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_gender_isset) {
    [outProtocol writeFieldBeginWithName: @"user_gender" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __user_gender];
    [outProtocol writeFieldEnd];
  }
  if (__user_address_isset) {
    if (__user_address != nil) {
      [outProtocol writeFieldBeginWithName: @"user_address" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __user_address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  if (__follow_date_isset) {
    if (__follow_date != nil) {
      [outProtocol writeFieldBeginWithName: @"follow_date" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __follow_date];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FollowUser("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_desc:"];
  [ms appendFormat: @"\"%@\"", __user_desc];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @",user_gender:"];
  [ms appendFormat: @"%i", __user_gender];
  [ms appendString: @",user_address:"];
  [ms appendFormat: @"\"%@\"", __user_address];
  [ms appendString: @",follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @",follow_date:"];
  [ms appendFormat: @"\"%@\"", __follow_date];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFollowListRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFollowListRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFollowListRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFollowListResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count user_list: (NSMutableArray *) user_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __user_list = [user_list retain_stub];
  __user_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_list"])
  {
    __user_list = [[decoder decodeObjectForKey: @"user_list"] retain_stub];
    __user_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__user_list_isset)
  {
    [encoder encodeObject: __user_list forKey: @"user_list"];
  }
}

- (void) dealloc
{
  [__user_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) user_list {
  return [[__user_list retain_stub] autorelease_stub];
}

- (void) setUser_list: (NSMutableArray *) user_list {
  [user_list retain_stub];
  [__user_list release_stub];
  __user_list = user_list;
  __user_list_isset = YES;
}

- (BOOL) user_listIsSet {
  return __user_list_isset;
}

- (void) unsetUser_list {
  [__user_list release_stub];
  __user_list = nil;
  __user_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            FollowUser *_elem7 = [[FollowUser alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setUser_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFollowListResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__user_list_isset) {
    if (__user_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_list count]];
        int idx9;
        for (idx9 = 0; idx9 < [__user_list count]; idx9++)
        {
          [[__user_list objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFollowListResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",user_list:"];
  [ms appendFormat: @"%@", __user_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFollowerListRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFollowerListRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFollowerListRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFollowerListResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count user_list: (NSMutableArray *) user_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __user_list = [user_list retain_stub];
  __user_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_list"])
  {
    __user_list = [[decoder decodeObjectForKey: @"user_list"] retain_stub];
    __user_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__user_list_isset)
  {
    [encoder encodeObject: __user_list forKey: @"user_list"];
  }
}

- (void) dealloc
{
  [__user_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) user_list {
  return [[__user_list retain_stub] autorelease_stub];
}

- (void) setUser_list: (NSMutableArray *) user_list {
  [user_list retain_stub];
  [__user_list release_stub];
  __user_list = user_list;
  __user_list_isset = YES;
}

- (BOOL) user_listIsSet {
  return __user_list_isset;
}

- (void) unsetUser_list {
  [__user_list release_stub];
  __user_list = nil;
  __user_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            FollowUser *_elem12 = [[FollowUser alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setUser_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFollowerListResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__user_list_isset) {
    if (__user_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_list count]];
        int idx14;
        for (idx14 = 0; idx14 < [__user_list count]; idx14++)
        {
          [[__user_list objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFollowerListResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",user_list:"];
  [ms appendFormat: @"%@", __user_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPhotoLikeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhotoLikeRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhotoLikeRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePhotoLikeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePhotoLikeRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePhotoLikeRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPocketLikeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPocketLikeRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPocketLikeRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePocketLikeRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePocketLikeRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePocketLikeRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPhotoRecommendRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhotoRecommendRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhotoRecommendRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePhotoRecommendRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePhotoRecommendRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePhotoRecommendRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPocketRecommendRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPocketRecommendRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPocketRecommendRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePocketRecommendRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePocketRecommendRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePocketRecommendRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUploadRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUploadRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUploadRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUploadResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPolicy: (NSString *) policy signature: (NSString *) signature key_id: (NSString *) key_id object_key: (NSString *) object_key
{
  self = [super init];
  __policy = [policy retain_stub];
  __policy_isset = YES;
  __signature = [signature retain_stub];
  __signature_isset = YES;
  __key_id = [key_id retain_stub];
  __key_id_isset = YES;
  __object_key = [object_key retain_stub];
  __object_key_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"policy"])
  {
    __policy = [[decoder decodeObjectForKey: @"policy"] retain_stub];
    __policy_isset = YES;
  }
  if ([decoder containsValueForKey: @"signature"])
  {
    __signature = [[decoder decodeObjectForKey: @"signature"] retain_stub];
    __signature_isset = YES;
  }
  if ([decoder containsValueForKey: @"key_id"])
  {
    __key_id = [[decoder decodeObjectForKey: @"key_id"] retain_stub];
    __key_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"object_key"])
  {
    __object_key = [[decoder decodeObjectForKey: @"object_key"] retain_stub];
    __object_key_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__policy_isset)
  {
    [encoder encodeObject: __policy forKey: @"policy"];
  }
  if (__signature_isset)
  {
    [encoder encodeObject: __signature forKey: @"signature"];
  }
  if (__key_id_isset)
  {
    [encoder encodeObject: __key_id forKey: @"key_id"];
  }
  if (__object_key_isset)
  {
    [encoder encodeObject: __object_key forKey: @"object_key"];
  }
}

- (void) dealloc
{
  [__policy release_stub];
  [__signature release_stub];
  [__key_id release_stub];
  [__object_key release_stub];
  [super dealloc_stub];
}

- (NSString *) policy {
  return [[__policy retain_stub] autorelease_stub];
}

- (void) setPolicy: (NSString *) policy {
  [policy retain_stub];
  [__policy release_stub];
  __policy = policy;
  __policy_isset = YES;
}

- (BOOL) policyIsSet {
  return __policy_isset;
}

- (void) unsetPolicy {
  [__policy release_stub];
  __policy = nil;
  __policy_isset = NO;
}

- (NSString *) signature {
  return [[__signature retain_stub] autorelease_stub];
}

- (void) setSignature: (NSString *) signature {
  [signature retain_stub];
  [__signature release_stub];
  __signature = signature;
  __signature_isset = YES;
}

- (BOOL) signatureIsSet {
  return __signature_isset;
}

- (void) unsetSignature {
  [__signature release_stub];
  __signature = nil;
  __signature_isset = NO;
}

- (NSString *) key_id {
  return [[__key_id retain_stub] autorelease_stub];
}

- (void) setKey_id: (NSString *) key_id {
  [key_id retain_stub];
  [__key_id release_stub];
  __key_id = key_id;
  __key_id_isset = YES;
}

- (BOOL) key_idIsSet {
  return __key_id_isset;
}

- (void) unsetKey_id {
  [__key_id release_stub];
  __key_id = nil;
  __key_id_isset = NO;
}

- (NSString *) object_key {
  return [[__object_key retain_stub] autorelease_stub];
}

- (void) setObject_key: (NSString *) object_key {
  [object_key retain_stub];
  [__object_key release_stub];
  __object_key = object_key;
  __object_key_isset = YES;
}

- (BOOL) object_keyIsSet {
  return __object_key_isset;
}

- (void) unsetObject_key {
  [__object_key release_stub];
  __object_key = nil;
  __object_key_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPolicy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSignature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObject_key: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUploadResponse"];
  if (__policy_isset) {
    if (__policy != nil) {
      [outProtocol writeFieldBeginWithName: @"policy" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __policy];
      [outProtocol writeFieldEnd];
    }
  }
  if (__signature_isset) {
    if (__signature != nil) {
      [outProtocol writeFieldBeginWithName: @"signature" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __signature];
      [outProtocol writeFieldEnd];
    }
  }
  if (__key_id_isset) {
    if (__key_id != nil) {
      [outProtocol writeFieldBeginWithName: @"key_id" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __key_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__object_key_isset) {
    if (__object_key != nil) {
      [outProtocol writeFieldBeginWithName: @"object_key" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __object_key];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUploadResponse("];
  [ms appendString: @"policy:"];
  [ms appendFormat: @"\"%@\"", __policy];
  [ms appendString: @",signature:"];
  [ms appendFormat: @"\"%@\"", __signature];
  [ms appendString: @",key_id:"];
  [ms appendFormat: @"\"%@\"", __key_id];
  [ms appendString: @",object_key:"];
  [ms appendFormat: @"\"%@\"", __object_key];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PutStyleRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session banner_photo: (NSString *) banner_photo
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __banner_photo = [banner_photo retain_stub];
  __banner_photo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"banner_photo"])
  {
    __banner_photo = [[decoder decodeObjectForKey: @"banner_photo"] retain_stub];
    __banner_photo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__banner_photo_isset)
  {
    [encoder encodeObject: __banner_photo forKey: @"banner_photo"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__banner_photo release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) banner_photo {
  return [[__banner_photo retain_stub] autorelease_stub];
}

- (void) setBanner_photo: (NSString *) banner_photo {
  [banner_photo retain_stub];
  [__banner_photo release_stub];
  __banner_photo = banner_photo;
  __banner_photo_isset = YES;
}

- (BOOL) banner_photoIsSet {
  return __banner_photo_isset;
}

- (void) unsetBanner_photo {
  [__banner_photo release_stub];
  __banner_photo = nil;
  __banner_photo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBanner_photo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PutStyleRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__banner_photo_isset) {
    if (__banner_photo != nil) {
      [outProtocol writeFieldBeginWithName: @"banner_photo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __banner_photo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PutStyleRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",banner_photo:"];
  [ms appendFormat: @"\"%@\"", __banner_photo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUserInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfoRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInfoRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetUserInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_name: (NSString *) user_name user_desc: (NSString *) user_desc user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain gender: (int32_t) gender birthday: (NSString *) birthday address: (NSString *) address qq: (NSString *) qq weixin: (NSString *) weixin weibo: (NSString *) weibo
{
  self = [super init];
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_desc = [user_desc retain_stub];
  __user_desc_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __qq = [qq retain_stub];
  __qq_isset = YES;
  __weixin = [weixin retain_stub];
  __weixin_isset = YES;
  __weibo = [weibo retain_stub];
  __weibo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_desc"])
  {
    __user_desc = [[decoder decodeObjectForKey: @"user_desc"] retain_stub];
    __user_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"qq"])
  {
    __qq = [[decoder decodeObjectForKey: @"qq"] retain_stub];
    __qq_isset = YES;
  }
  if ([decoder containsValueForKey: @"weixin"])
  {
    __weixin = [[decoder decodeObjectForKey: @"weixin"] retain_stub];
    __weixin_isset = YES;
  }
  if ([decoder containsValueForKey: @"weibo"])
  {
    __weibo = [[decoder decodeObjectForKey: @"weibo"] retain_stub];
    __weibo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_desc_isset)
  {
    [encoder encodeObject: __user_desc forKey: @"user_desc"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__qq_isset)
  {
    [encoder encodeObject: __qq forKey: @"qq"];
  }
  if (__weixin_isset)
  {
    [encoder encodeObject: __weixin forKey: @"weixin"];
  }
  if (__weibo_isset)
  {
    [encoder encodeObject: __weibo forKey: @"weibo"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_desc release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [__birthday release_stub];
  [__address release_stub];
  [__qq release_stub];
  [__weixin release_stub];
  [__weibo release_stub];
  [super dealloc_stub];
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_desc {
  return [[__user_desc retain_stub] autorelease_stub];
}

- (void) setUser_desc: (NSString *) user_desc {
  [user_desc retain_stub];
  [__user_desc release_stub];
  __user_desc = user_desc;
  __user_desc_isset = YES;
}

- (BOOL) user_descIsSet {
  return __user_desc_isset;
}

- (void) unsetUser_desc {
  [__user_desc release_stub];
  __user_desc = nil;
  __user_desc_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) qq {
  return [[__qq retain_stub] autorelease_stub];
}

- (void) setQq: (NSString *) qq {
  [qq retain_stub];
  [__qq release_stub];
  __qq = qq;
  __qq_isset = YES;
}

- (BOOL) qqIsSet {
  return __qq_isset;
}

- (void) unsetQq {
  [__qq release_stub];
  __qq = nil;
  __qq_isset = NO;
}

- (NSString *) weixin {
  return [[__weixin retain_stub] autorelease_stub];
}

- (void) setWeixin: (NSString *) weixin {
  [weixin retain_stub];
  [__weixin release_stub];
  __weixin = weixin;
  __weixin_isset = YES;
}

- (BOOL) weixinIsSet {
  return __weixin_isset;
}

- (void) unsetWeixin {
  [__weixin release_stub];
  __weixin = nil;
  __weixin_isset = NO;
}

- (NSString *) weibo {
  return [[__weibo retain_stub] autorelease_stub];
}

- (void) setWeibo: (NSString *) weibo {
  [weibo retain_stub];
  [__weibo release_stub];
  __weibo = weibo;
  __weibo_isset = YES;
}

- (BOOL) weiboIsSet {
  return __weibo_isset;
}

- (void) unsetWeibo {
  [__weibo release_stub];
  __weibo = nil;
  __weibo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeixin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeibo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetUserInfoResponse"];
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_desc_isset) {
    if (__user_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"user_desc" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qq_isset) {
    if (__qq != nil) {
      [outProtocol writeFieldBeginWithName: @"qq" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __qq];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weixin_isset) {
    if (__weixin != nil) {
      [outProtocol writeFieldBeginWithName: @"weixin" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __weixin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weibo_isset) {
    if (__weibo != nil) {
      [outProtocol writeFieldBeginWithName: @"weibo" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __weibo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetUserInfoResponse("];
  [ms appendString: @"user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_desc:"];
  [ms appendFormat: @"\"%@\"", __user_desc];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",qq:"];
  [ms appendFormat: @"\"%@\"", __qq];
  [ms appendString: @",weixin:"];
  [ms appendFormat: @"\"%@\"", __weixin];
  [ms appendString: @",weibo:"];
  [ms appendFormat: @"\"%@\"", __weibo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ModifyUserInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session user_name: (NSString *) user_name user_desc: (NSString *) user_desc user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain gender: (int32_t) gender birthday: (NSString *) birthday address: (NSString *) address qq: (NSString *) qq weixin: (NSString *) weixin weibo: (NSString *) weibo
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_desc = [user_desc retain_stub];
  __user_desc_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __qq = [qq retain_stub];
  __qq_isset = YES;
  __weixin = [weixin retain_stub];
  __weixin_isset = YES;
  __weibo = [weibo retain_stub];
  __weibo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_desc"])
  {
    __user_desc = [[decoder decodeObjectForKey: @"user_desc"] retain_stub];
    __user_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"qq"])
  {
    __qq = [[decoder decodeObjectForKey: @"qq"] retain_stub];
    __qq_isset = YES;
  }
  if ([decoder containsValueForKey: @"weixin"])
  {
    __weixin = [[decoder decodeObjectForKey: @"weixin"] retain_stub];
    __weixin_isset = YES;
  }
  if ([decoder containsValueForKey: @"weibo"])
  {
    __weibo = [[decoder decodeObjectForKey: @"weibo"] retain_stub];
    __weibo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_desc_isset)
  {
    [encoder encodeObject: __user_desc forKey: @"user_desc"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__qq_isset)
  {
    [encoder encodeObject: __qq forKey: @"qq"];
  }
  if (__weixin_isset)
  {
    [encoder encodeObject: __weixin forKey: @"weixin"];
  }
  if (__weibo_isset)
  {
    [encoder encodeObject: __weibo forKey: @"weibo"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__user_name release_stub];
  [__user_desc release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [__birthday release_stub];
  [__address release_stub];
  [__qq release_stub];
  [__weixin release_stub];
  [__weibo release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_desc {
  return [[__user_desc retain_stub] autorelease_stub];
}

- (void) setUser_desc: (NSString *) user_desc {
  [user_desc retain_stub];
  [__user_desc release_stub];
  __user_desc = user_desc;
  __user_desc_isset = YES;
}

- (BOOL) user_descIsSet {
  return __user_desc_isset;
}

- (void) unsetUser_desc {
  [__user_desc release_stub];
  __user_desc = nil;
  __user_desc_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) qq {
  return [[__qq retain_stub] autorelease_stub];
}

- (void) setQq: (NSString *) qq {
  [qq retain_stub];
  [__qq release_stub];
  __qq = qq;
  __qq_isset = YES;
}

- (BOOL) qqIsSet {
  return __qq_isset;
}

- (void) unsetQq {
  [__qq release_stub];
  __qq = nil;
  __qq_isset = NO;
}

- (NSString *) weixin {
  return [[__weixin retain_stub] autorelease_stub];
}

- (void) setWeixin: (NSString *) weixin {
  [weixin retain_stub];
  [__weixin release_stub];
  __weixin = weixin;
  __weixin_isset = YES;
}

- (BOOL) weixinIsSet {
  return __weixin_isset;
}

- (void) unsetWeixin {
  [__weixin release_stub];
  __weixin = nil;
  __weixin_isset = NO;
}

- (NSString *) weibo {
  return [[__weibo retain_stub] autorelease_stub];
}

- (void) setWeibo: (NSString *) weibo {
  [weibo retain_stub];
  [__weibo release_stub];
  __weibo = weibo;
  __weibo_isset = YES;
}

- (BOOL) weiboIsSet {
  return __weibo_isset;
}

- (void) unsetWeibo {
  [__weibo release_stub];
  __weibo = nil;
  __weibo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeixin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeibo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ModifyUserInfoRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_desc_isset) {
    if (__user_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"user_desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qq_isset) {
    if (__qq != nil) {
      [outProtocol writeFieldBeginWithName: @"qq" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __qq];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weixin_isset) {
    if (__weixin != nil) {
      [outProtocol writeFieldBeginWithName: @"weixin" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __weixin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weibo_isset) {
    if (__weibo != nil) {
      [outProtocol writeFieldBeginWithName: @"weibo" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __weibo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ModifyUserInfoRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_desc:"];
  [ms appendFormat: @"\"%@\"", __user_desc];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",qq:"];
  [ms appendFormat: @"\"%@\"", __qq];
  [ms appendString: @",weixin:"];
  [ms appendFormat: @"\"%@\"", __weixin];
  [ms appendString: @",weibo:"];
  [ms appendFormat: @"\"%@\"", __weibo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ModifyUserInfoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_name: (NSString *) user_name user_desc: (NSString *) user_desc user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain gender: (int32_t) gender birthday: (NSString *) birthday address: (NSString *) address qq: (NSString *) qq weixin: (NSString *) weixin weibo: (NSString *) weibo
{
  self = [super init];
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_desc = [user_desc retain_stub];
  __user_desc_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __qq = [qq retain_stub];
  __qq_isset = YES;
  __weixin = [weixin retain_stub];
  __weixin_isset = YES;
  __weibo = [weibo retain_stub];
  __weibo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_desc"])
  {
    __user_desc = [[decoder decodeObjectForKey: @"user_desc"] retain_stub];
    __user_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"qq"])
  {
    __qq = [[decoder decodeObjectForKey: @"qq"] retain_stub];
    __qq_isset = YES;
  }
  if ([decoder containsValueForKey: @"weixin"])
  {
    __weixin = [[decoder decodeObjectForKey: @"weixin"] retain_stub];
    __weixin_isset = YES;
  }
  if ([decoder containsValueForKey: @"weibo"])
  {
    __weibo = [[decoder decodeObjectForKey: @"weibo"] retain_stub];
    __weibo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_desc_isset)
  {
    [encoder encodeObject: __user_desc forKey: @"user_desc"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__qq_isset)
  {
    [encoder encodeObject: __qq forKey: @"qq"];
  }
  if (__weixin_isset)
  {
    [encoder encodeObject: __weixin forKey: @"weixin"];
  }
  if (__weibo_isset)
  {
    [encoder encodeObject: __weibo forKey: @"weibo"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_desc release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [__birthday release_stub];
  [__address release_stub];
  [__qq release_stub];
  [__weixin release_stub];
  [__weibo release_stub];
  [super dealloc_stub];
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_desc {
  return [[__user_desc retain_stub] autorelease_stub];
}

- (void) setUser_desc: (NSString *) user_desc {
  [user_desc retain_stub];
  [__user_desc release_stub];
  __user_desc = user_desc;
  __user_desc_isset = YES;
}

- (BOOL) user_descIsSet {
  return __user_desc_isset;
}

- (void) unsetUser_desc {
  [__user_desc release_stub];
  __user_desc = nil;
  __user_desc_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (NSString *) qq {
  return [[__qq retain_stub] autorelease_stub];
}

- (void) setQq: (NSString *) qq {
  [qq retain_stub];
  [__qq release_stub];
  __qq = qq;
  __qq_isset = YES;
}

- (BOOL) qqIsSet {
  return __qq_isset;
}

- (void) unsetQq {
  [__qq release_stub];
  __qq = nil;
  __qq_isset = NO;
}

- (NSString *) weixin {
  return [[__weixin retain_stub] autorelease_stub];
}

- (void) setWeixin: (NSString *) weixin {
  [weixin retain_stub];
  [__weixin release_stub];
  __weixin = weixin;
  __weixin_isset = YES;
}

- (BOOL) weixinIsSet {
  return __weixin_isset;
}

- (void) unsetWeixin {
  [__weixin release_stub];
  __weixin = nil;
  __weixin_isset = NO;
}

- (NSString *) weibo {
  return [[__weibo retain_stub] autorelease_stub];
}

- (void) setWeibo: (NSString *) weibo {
  [weibo retain_stub];
  [__weibo release_stub];
  __weibo = weibo;
  __weibo_isset = YES;
}

- (BOOL) weiboIsSet {
  return __weibo_isset;
}

- (void) unsetWeibo {
  [__weibo release_stub];
  __weibo = nil;
  __weibo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQq: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeixin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWeibo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ModifyUserInfoResponse"];
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_desc_isset) {
    if (__user_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"user_desc" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__qq_isset) {
    if (__qq != nil) {
      [outProtocol writeFieldBeginWithName: @"qq" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __qq];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weixin_isset) {
    if (__weixin != nil) {
      [outProtocol writeFieldBeginWithName: @"weixin" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __weixin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__weibo_isset) {
    if (__weibo != nil) {
      [outProtocol writeFieldBeginWithName: @"weibo" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __weibo];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ModifyUserInfoResponse("];
  [ms appendString: @"user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_desc:"];
  [ms appendFormat: @"\"%@\"", __user_desc];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",qq:"];
  [ms appendFormat: @"\"%@\"", __qq];
  [ms appendString: @",weixin:"];
  [ms appendFormat: @"\"%@\"", __weixin];
  [ms appendString: @",weibo:"];
  [ms appendFormat: @"\"%@\"", __weibo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation userConstants
+ (void) initialize {
}
@end

