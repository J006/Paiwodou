/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "content.h"

@implementation RecommendPocket

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPocket_id: (int64_t) pocket_id pocket_cover_photo: (NSString *) pocket_cover_photo pocket_title: (NSString *) pocket_title
{
  self = [super init];
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __pocket_cover_photo = [pocket_cover_photo retain_stub];
  __pocket_cover_photo_isset = YES;
  __pocket_title = [pocket_title retain_stub];
  __pocket_title_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_cover_photo"])
  {
    __pocket_cover_photo = [[decoder decodeObjectForKey: @"pocket_cover_photo"] retain_stub];
    __pocket_cover_photo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_title"])
  {
    __pocket_title = [[decoder decodeObjectForKey: @"pocket_title"] retain_stub];
    __pocket_title_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__pocket_cover_photo_isset)
  {
    [encoder encodeObject: __pocket_cover_photo forKey: @"pocket_cover_photo"];
  }
  if (__pocket_title_isset)
  {
    [encoder encodeObject: __pocket_title forKey: @"pocket_title"];
  }
}

- (void) dealloc
{
  [__pocket_cover_photo release_stub];
  [__pocket_title release_stub];
  [super dealloc_stub];
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (NSString *) pocket_cover_photo {
  return [[__pocket_cover_photo retain_stub] autorelease_stub];
}

- (void) setPocket_cover_photo: (NSString *) pocket_cover_photo {
  [pocket_cover_photo retain_stub];
  [__pocket_cover_photo release_stub];
  __pocket_cover_photo = pocket_cover_photo;
  __pocket_cover_photo_isset = YES;
}

- (BOOL) pocket_cover_photoIsSet {
  return __pocket_cover_photo_isset;
}

- (void) unsetPocket_cover_photo {
  [__pocket_cover_photo release_stub];
  __pocket_cover_photo = nil;
  __pocket_cover_photo_isset = NO;
}

- (NSString *) pocket_title {
  return [[__pocket_title retain_stub] autorelease_stub];
}

- (void) setPocket_title: (NSString *) pocket_title {
  [pocket_title retain_stub];
  [__pocket_title release_stub];
  __pocket_title = pocket_title;
  __pocket_title_isset = YES;
}

- (BOOL) pocket_titleIsSet {
  return __pocket_title_isset;
}

- (void) unsetPocket_title {
  [__pocket_title release_stub];
  __pocket_title = nil;
  __pocket_title_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_cover_photo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendPocket"];
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__pocket_cover_photo_isset) {
    if (__pocket_cover_photo != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_cover_photo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pocket_cover_photo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_title_isset) {
    if (__pocket_title != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pocket_title];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendPocket("];
  [ms appendString: @"pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",pocket_cover_photo:"];
  [ms appendFormat: @"\"%@\"", __pocket_cover_photo];
  [ms appendString: @",pocket_title:"];
  [ms appendFormat: @"\"%@\"", __pocket_title];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRecommendPocketRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecommendPocketRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendPocketRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRecommendPocketResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPocket_list: (NSMutableArray *) pocket_list
{
  self = [super init];
  __pocket_list = [pocket_list retain_stub];
  __pocket_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pocket_list"])
  {
    __pocket_list = [[decoder decodeObjectForKey: @"pocket_list"] retain_stub];
    __pocket_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pocket_list_isset)
  {
    [encoder encodeObject: __pocket_list forKey: @"pocket_list"];
  }
}

- (void) dealloc
{
  [__pocket_list release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) pocket_list {
  return [[__pocket_list retain_stub] autorelease_stub];
}

- (void) setPocket_list: (NSMutableArray *) pocket_list {
  [pocket_list retain_stub];
  [__pocket_list release_stub];
  __pocket_list = pocket_list;
  __pocket_list_isset = YES;
}

- (BOOL) pocket_listIsSet {
  return __pocket_list_isset;
}

- (void) unsetPocket_list {
  [__pocket_list release_stub];
  __pocket_list = nil;
  __pocket_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            RecommendPocket *_elem2 = [[RecommendPocket alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setPocket_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecommendPocketResponse"];
  if (__pocket_list_isset) {
    if (__pocket_list != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pocket_list count]];
        int idx4;
        for (idx4 = 0; idx4 < [__pocket_list count]; idx4++)
        {
          [[__pocket_list objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendPocketResponse("];
  [ms appendString: @"pocket_list:"];
  [ms appendFormat: @"%@", __pocket_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecommendUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_id: (int64_t) user_id user_name: (NSString *) user_name user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [super dealloc_stub];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendUser"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendUser("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRecommendUserRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecommendUserRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendUserRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetRecommendUserResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_list: (NSMutableArray *) user_list
{
  self = [super init];
  __user_list = [user_list retain_stub];
  __user_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_list"])
  {
    __user_list = [[decoder decodeObjectForKey: @"user_list"] retain_stub];
    __user_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_list_isset)
  {
    [encoder encodeObject: __user_list forKey: @"user_list"];
  }
}

- (void) dealloc
{
  [__user_list release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) user_list {
  return [[__user_list retain_stub] autorelease_stub];
}

- (void) setUser_list: (NSMutableArray *) user_list {
  [user_list retain_stub];
  [__user_list release_stub];
  __user_list = user_list;
  __user_list_isset = YES;
}

- (BOOL) user_listIsSet {
  return __user_list_isset;
}

- (void) unsetUser_list {
  [__user_list release_stub];
  __user_list = nil;
  __user_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            RecommendUser *_elem7 = [[RecommendUser alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setUser_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRecommendUserResponse"];
  if (__user_list_isset) {
    if (__user_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_list count]];
        int idx9;
        for (idx9 = 0; idx9 < [__user_list count]; idx9++)
        {
          [[__user_list objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendUserResponse("];
  [ms appendString: @"user_list:"];
  [ms appendFormat: @"%@", __user_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FeedContent

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFeed_type: (int32_t) feed_type content: (NSString *) content content_id: (int64_t) content_id content_type: (int32_t) content_type user_id: (int64_t) user_id user_name: (NSString *) user_name user_avatar: (NSString *) user_avatar user_domain: (NSString *) user_domain feed_time: (double) feed_time
{
  self = [super init];
  __feed_type = feed_type;
  __feed_type_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __content_id = content_id;
  __content_id_isset = YES;
  __content_type = content_type;
  __content_type_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_avatar = [user_avatar retain_stub];
  __user_avatar_isset = YES;
  __user_domain = [user_domain retain_stub];
  __user_domain_isset = YES;
  __feed_time = feed_time;
  __feed_time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feed_type"])
  {
    __feed_type = [decoder decodeInt32ForKey: @"feed_type"];
    __feed_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_id"])
  {
    __content_id = [decoder decodeInt64ForKey: @"content_id"];
    __content_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_type"])
  {
    __content_type = [decoder decodeInt32ForKey: @"content_type"];
    __content_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_avatar"])
  {
    __user_avatar = [[decoder decodeObjectForKey: @"user_avatar"] retain_stub];
    __user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_domain"])
  {
    __user_domain = [[decoder decodeObjectForKey: @"user_domain"] retain_stub];
    __user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"feed_time"])
  {
    __feed_time = [decoder decodeDoubleForKey: @"feed_time"];
    __feed_time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feed_type_isset)
  {
    [encoder encodeInt32: __feed_type forKey: @"feed_type"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__content_id_isset)
  {
    [encoder encodeInt64: __content_id forKey: @"content_id"];
  }
  if (__content_type_isset)
  {
    [encoder encodeInt32: __content_type forKey: @"content_type"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_avatar_isset)
  {
    [encoder encodeObject: __user_avatar forKey: @"user_avatar"];
  }
  if (__user_domain_isset)
  {
    [encoder encodeObject: __user_domain forKey: @"user_domain"];
  }
  if (__feed_time_isset)
  {
    [encoder encodeDouble: __feed_time forKey: @"feed_time"];
  }
}

- (void) dealloc
{
  [__content release_stub];
  [__user_name release_stub];
  [__user_avatar release_stub];
  [__user_domain release_stub];
  [super dealloc_stub];
}

- (int32_t) feed_type {
  return __feed_type;
}

- (void) setFeed_type: (int32_t) feed_type {
  __feed_type = feed_type;
  __feed_type_isset = YES;
}

- (BOOL) feed_typeIsSet {
  return __feed_type_isset;
}

- (void) unsetFeed_type {
  __feed_type_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (int64_t) content_id {
  return __content_id;
}

- (void) setContent_id: (int64_t) content_id {
  __content_id = content_id;
  __content_id_isset = YES;
}

- (BOOL) content_idIsSet {
  return __content_id_isset;
}

- (void) unsetContent_id {
  __content_id_isset = NO;
}

- (int32_t) content_type {
  return __content_type;
}

- (void) setContent_type: (int32_t) content_type {
  __content_type = content_type;
  __content_type_isset = YES;
}

- (BOOL) content_typeIsSet {
  return __content_type_isset;
}

- (void) unsetContent_type {
  __content_type_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_avatar {
  return [[__user_avatar retain_stub] autorelease_stub];
}

- (void) setUser_avatar: (NSString *) user_avatar {
  [user_avatar retain_stub];
  [__user_avatar release_stub];
  __user_avatar = user_avatar;
  __user_avatar_isset = YES;
}

- (BOOL) user_avatarIsSet {
  return __user_avatar_isset;
}

- (void) unsetUser_avatar {
  [__user_avatar release_stub];
  __user_avatar = nil;
  __user_avatar_isset = NO;
}

- (NSString *) user_domain {
  return [[__user_domain retain_stub] autorelease_stub];
}

- (void) setUser_domain: (NSString *) user_domain {
  [user_domain retain_stub];
  [__user_domain release_stub];
  __user_domain = user_domain;
  __user_domain_isset = YES;
}

- (BOOL) user_domainIsSet {
  return __user_domain_isset;
}

- (void) unsetUser_domain {
  [__user_domain release_stub];
  __user_domain = nil;
  __user_domain_isset = NO;
}

- (double) feed_time {
  return __feed_time;
}

- (void) setFeed_time: (double) feed_time {
  __feed_time = feed_time;
  __feed_time_isset = YES;
}

- (BOOL) feed_timeIsSet {
  return __feed_time_isset;
}

- (void) unsetFeed_time {
  __feed_time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFeed_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setContent_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContent_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setFeed_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeedContent"];
  if (__feed_type_isset) {
    [outProtocol writeFieldBeginWithName: @"feed_type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __feed_type];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_id_isset) {
    [outProtocol writeFieldBeginWithName: @"content_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __content_id];
    [outProtocol writeFieldEnd];
  }
  if (__content_type_isset) {
    [outProtocol writeFieldBeginWithName: @"content_type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __content_type];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_avatar_isset) {
    if (__user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"user_avatar" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_domain_isset) {
    if (__user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"user_domain" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__feed_time_isset) {
    [outProtocol writeFieldBeginWithName: @"feed_time" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __feed_time];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FeedContent("];
  [ms appendString: @"feed_type:"];
  [ms appendFormat: @"%i", __feed_type];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",content_id:"];
  [ms appendFormat: @"%qi", __content_id];
  [ms appendString: @",content_type:"];
  [ms appendFormat: @"%i", __content_type];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_avatar:"];
  [ms appendFormat: @"\"%@\"", __user_avatar];
  [ms appendString: @",user_domain:"];
  [ms appendFormat: @"\"%@\"", __user_domain];
  [ms appendString: @",feed_time:"];
  [ms appendFormat: @"%f", __feed_time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFeedRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session time_stamp: (double) time_stamp time_flag: (int32_t) time_flag
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __time_stamp = time_stamp;
  __time_stamp_isset = YES;
  __time_flag = time_flag;
  __time_flag_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_stamp"])
  {
    __time_stamp = [decoder decodeDoubleForKey: @"time_stamp"];
    __time_stamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"time_flag"])
  {
    __time_flag = [decoder decodeInt32ForKey: @"time_flag"];
    __time_flag_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__time_stamp_isset)
  {
    [encoder encodeDouble: __time_stamp forKey: @"time_stamp"];
  }
  if (__time_flag_isset)
  {
    [encoder encodeInt32: __time_flag forKey: @"time_flag"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (double) time_stamp {
  return __time_stamp;
}

- (void) setTime_stamp: (double) time_stamp {
  __time_stamp = time_stamp;
  __time_stamp_isset = YES;
}

- (BOOL) time_stampIsSet {
  return __time_stamp_isset;
}

- (void) unsetTime_stamp {
  __time_stamp_isset = NO;
}

- (int32_t) time_flag {
  return __time_flag;
}

- (void) setTime_flag: (int32_t) time_flag {
  __time_flag = time_flag;
  __time_flag_isset = YES;
}

- (BOOL) time_flagIsSet {
  return __time_flag_isset;
}

- (void) unsetTime_flag {
  __time_flag_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTime_stamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTime_flag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFeedRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_stamp_isset) {
    [outProtocol writeFieldBeginWithName: @"time_stamp" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __time_stamp];
    [outProtocol writeFieldEnd];
  }
  if (__time_flag_isset) {
    [outProtocol writeFieldBeginWithName: @"time_flag" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __time_flag];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFeedRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",time_stamp:"];
  [ms appendFormat: @"%f", __time_stamp];
  [ms appendString: @",time_flag:"];
  [ms appendFormat: @"%i", __time_flag];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFeedResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFeed_list: (NSMutableArray *) feed_list
{
  self = [super init];
  __feed_list = [feed_list retain_stub];
  __feed_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"feed_list"])
  {
    __feed_list = [[decoder decodeObjectForKey: @"feed_list"] retain_stub];
    __feed_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__feed_list_isset)
  {
    [encoder encodeObject: __feed_list forKey: @"feed_list"];
  }
}

- (void) dealloc
{
  [__feed_list release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) feed_list {
  return [[__feed_list retain_stub] autorelease_stub];
}

- (void) setFeed_list: (NSMutableArray *) feed_list {
  [feed_list retain_stub];
  [__feed_list release_stub];
  __feed_list = feed_list;
  __feed_list_isset = YES;
}

- (BOOL) feed_listIsSet {
  return __feed_list_isset;
}

- (void) unsetFeed_list {
  [__feed_list release_stub];
  __feed_list = nil;
  __feed_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            FeedContent *_elem12 = [[FeedContent alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeed_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFeedResponse"];
  if (__feed_list_isset) {
    if (__feed_list != nil) {
      [outProtocol writeFieldBeginWithName: @"feed_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__feed_list count]];
        int idx14;
        for (idx14 = 0; idx14 < [__feed_list count]; idx14++)
        {
          [[__feed_list objectAtIndex: idx14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFeedResponse("];
  [ms appendString: @"feed_list:"];
  [ms appendFormat: @"%@", __feed_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DynamicContentPhoto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path is_cover: (BOOL) is_cover
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  __is_cover = is_cover;
  __is_cover_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_cover"])
  {
    __is_cover = [decoder decodeBoolForKey: @"is_cover"];
    __is_cover_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
  if (__is_cover_isset)
  {
    [encoder encodeBool: __is_cover forKey: @"is_cover"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (BOOL) is_cover {
  return __is_cover;
}

- (void) setIs_cover: (BOOL) is_cover {
  __is_cover = is_cover;
  __is_cover_isset = YES;
}

- (BOOL) is_coverIsSet {
  return __is_cover_isset;
}

- (void) unsetIs_cover {
  __is_cover_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_cover: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DynamicContentPhoto"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_cover_isset) {
    [outProtocol writeFieldBeginWithName: @"is_cover" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __is_cover];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DynamicContentPhoto("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @",is_cover:"];
  [ms appendFormat: @"%i", __is_cover];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DynamicContent

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithContent_id: (int64_t) content_id content_type: (int32_t) content_type content_user_id: (int64_t) content_user_id content_user_name: (NSString *) content_user_name content_user_avatar: (NSString *) content_user_avatar content_user_domain: (NSString *) content_user_domain photo_list: (NSMutableArray *) photo_list photo_count: (int32_t) photo_count content_title: (NSString *) content_title content_desc: (NSString *) content_desc content_author_id: (int64_t) content_author_id content_author_name: (NSString *) content_author_name content_author_domain: (NSString *) content_author_domain create_time: (NSString *) create_time is_like: (BOOL) is_like is_recommend: (BOOL) is_recommend is_delete: (BOOL) is_delete
{
  self = [super init];
  __content_id = content_id;
  __content_id_isset = YES;
  __content_type = content_type;
  __content_type_isset = YES;
  __content_user_id = content_user_id;
  __content_user_id_isset = YES;
  __content_user_name = [content_user_name retain_stub];
  __content_user_name_isset = YES;
  __content_user_avatar = [content_user_avatar retain_stub];
  __content_user_avatar_isset = YES;
  __content_user_domain = [content_user_domain retain_stub];
  __content_user_domain_isset = YES;
  __photo_list = [photo_list retain_stub];
  __photo_list_isset = YES;
  __photo_count = photo_count;
  __photo_count_isset = YES;
  __content_title = [content_title retain_stub];
  __content_title_isset = YES;
  __content_desc = [content_desc retain_stub];
  __content_desc_isset = YES;
  __content_author_id = content_author_id;
  __content_author_id_isset = YES;
  __content_author_name = [content_author_name retain_stub];
  __content_author_name_isset = YES;
  __content_author_domain = [content_author_domain retain_stub];
  __content_author_domain_isset = YES;
  __create_time = [create_time retain_stub];
  __create_time_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
  __is_delete = is_delete;
  __is_delete_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"content_id"])
  {
    __content_id = [decoder decodeInt64ForKey: @"content_id"];
    __content_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_type"])
  {
    __content_type = [decoder decodeInt32ForKey: @"content_type"];
    __content_type_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_user_id"])
  {
    __content_user_id = [decoder decodeInt64ForKey: @"content_user_id"];
    __content_user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_user_name"])
  {
    __content_user_name = [[decoder decodeObjectForKey: @"content_user_name"] retain_stub];
    __content_user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_user_avatar"])
  {
    __content_user_avatar = [[decoder decodeObjectForKey: @"content_user_avatar"] retain_stub];
    __content_user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_user_domain"])
  {
    __content_user_domain = [[decoder decodeObjectForKey: @"content_user_domain"] retain_stub];
    __content_user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_list"])
  {
    __photo_list = [[decoder decodeObjectForKey: @"photo_list"] retain_stub];
    __photo_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_count"])
  {
    __photo_count = [decoder decodeInt32ForKey: @"photo_count"];
    __photo_count_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_title"])
  {
    __content_title = [[decoder decodeObjectForKey: @"content_title"] retain_stub];
    __content_title_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_desc"])
  {
    __content_desc = [[decoder decodeObjectForKey: @"content_desc"] retain_stub];
    __content_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_author_id"])
  {
    __content_author_id = [decoder decodeInt64ForKey: @"content_author_id"];
    __content_author_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_author_name"])
  {
    __content_author_name = [[decoder decodeObjectForKey: @"content_author_name"] retain_stub];
    __content_author_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_author_domain"])
  {
    __content_author_domain = [[decoder decodeObjectForKey: @"content_author_domain"] retain_stub];
    __content_author_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"create_time"])
  {
    __create_time = [[decoder decodeObjectForKey: @"create_time"] retain_stub];
    __create_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_recommend"])
  {
    __is_recommend = [decoder decodeBoolForKey: @"is_recommend"];
    __is_recommend_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_delete"])
  {
    __is_delete = [decoder decodeBoolForKey: @"is_delete"];
    __is_delete_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__content_id_isset)
  {
    [encoder encodeInt64: __content_id forKey: @"content_id"];
  }
  if (__content_type_isset)
  {
    [encoder encodeInt32: __content_type forKey: @"content_type"];
  }
  if (__content_user_id_isset)
  {
    [encoder encodeInt64: __content_user_id forKey: @"content_user_id"];
  }
  if (__content_user_name_isset)
  {
    [encoder encodeObject: __content_user_name forKey: @"content_user_name"];
  }
  if (__content_user_avatar_isset)
  {
    [encoder encodeObject: __content_user_avatar forKey: @"content_user_avatar"];
  }
  if (__content_user_domain_isset)
  {
    [encoder encodeObject: __content_user_domain forKey: @"content_user_domain"];
  }
  if (__photo_list_isset)
  {
    [encoder encodeObject: __photo_list forKey: @"photo_list"];
  }
  if (__photo_count_isset)
  {
    [encoder encodeInt32: __photo_count forKey: @"photo_count"];
  }
  if (__content_title_isset)
  {
    [encoder encodeObject: __content_title forKey: @"content_title"];
  }
  if (__content_desc_isset)
  {
    [encoder encodeObject: __content_desc forKey: @"content_desc"];
  }
  if (__content_author_id_isset)
  {
    [encoder encodeInt64: __content_author_id forKey: @"content_author_id"];
  }
  if (__content_author_name_isset)
  {
    [encoder encodeObject: __content_author_name forKey: @"content_author_name"];
  }
  if (__content_author_domain_isset)
  {
    [encoder encodeObject: __content_author_domain forKey: @"content_author_domain"];
  }
  if (__create_time_isset)
  {
    [encoder encodeObject: __create_time forKey: @"create_time"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
  if (__is_recommend_isset)
  {
    [encoder encodeBool: __is_recommend forKey: @"is_recommend"];
  }
  if (__is_delete_isset)
  {
    [encoder encodeBool: __is_delete forKey: @"is_delete"];
  }
}

- (void) dealloc
{
  [__content_user_name release_stub];
  [__content_user_avatar release_stub];
  [__content_user_domain release_stub];
  [__photo_list release_stub];
  [__content_title release_stub];
  [__content_desc release_stub];
  [__content_author_name release_stub];
  [__content_author_domain release_stub];
  [__create_time release_stub];
  [super dealloc_stub];
}

- (int64_t) content_id {
  return __content_id;
}

- (void) setContent_id: (int64_t) content_id {
  __content_id = content_id;
  __content_id_isset = YES;
}

- (BOOL) content_idIsSet {
  return __content_id_isset;
}

- (void) unsetContent_id {
  __content_id_isset = NO;
}

- (int32_t) content_type {
  return __content_type;
}

- (void) setContent_type: (int32_t) content_type {
  __content_type = content_type;
  __content_type_isset = YES;
}

- (BOOL) content_typeIsSet {
  return __content_type_isset;
}

- (void) unsetContent_type {
  __content_type_isset = NO;
}

- (int64_t) content_user_id {
  return __content_user_id;
}

- (void) setContent_user_id: (int64_t) content_user_id {
  __content_user_id = content_user_id;
  __content_user_id_isset = YES;
}

- (BOOL) content_user_idIsSet {
  return __content_user_id_isset;
}

- (void) unsetContent_user_id {
  __content_user_id_isset = NO;
}

- (NSString *) content_user_name {
  return [[__content_user_name retain_stub] autorelease_stub];
}

- (void) setContent_user_name: (NSString *) content_user_name {
  [content_user_name retain_stub];
  [__content_user_name release_stub];
  __content_user_name = content_user_name;
  __content_user_name_isset = YES;
}

- (BOOL) content_user_nameIsSet {
  return __content_user_name_isset;
}

- (void) unsetContent_user_name {
  [__content_user_name release_stub];
  __content_user_name = nil;
  __content_user_name_isset = NO;
}

- (NSString *) content_user_avatar {
  return [[__content_user_avatar retain_stub] autorelease_stub];
}

- (void) setContent_user_avatar: (NSString *) content_user_avatar {
  [content_user_avatar retain_stub];
  [__content_user_avatar release_stub];
  __content_user_avatar = content_user_avatar;
  __content_user_avatar_isset = YES;
}

- (BOOL) content_user_avatarIsSet {
  return __content_user_avatar_isset;
}

- (void) unsetContent_user_avatar {
  [__content_user_avatar release_stub];
  __content_user_avatar = nil;
  __content_user_avatar_isset = NO;
}

- (NSString *) content_user_domain {
  return [[__content_user_domain retain_stub] autorelease_stub];
}

- (void) setContent_user_domain: (NSString *) content_user_domain {
  [content_user_domain retain_stub];
  [__content_user_domain release_stub];
  __content_user_domain = content_user_domain;
  __content_user_domain_isset = YES;
}

- (BOOL) content_user_domainIsSet {
  return __content_user_domain_isset;
}

- (void) unsetContent_user_domain {
  [__content_user_domain release_stub];
  __content_user_domain = nil;
  __content_user_domain_isset = NO;
}

- (NSMutableArray *) photo_list {
  return [[__photo_list retain_stub] autorelease_stub];
}

- (void) setPhoto_list: (NSMutableArray *) photo_list {
  [photo_list retain_stub];
  [__photo_list release_stub];
  __photo_list = photo_list;
  __photo_list_isset = YES;
}

- (BOOL) photo_listIsSet {
  return __photo_list_isset;
}

- (void) unsetPhoto_list {
  [__photo_list release_stub];
  __photo_list = nil;
  __photo_list_isset = NO;
}

- (int32_t) photo_count {
  return __photo_count;
}

- (void) setPhoto_count: (int32_t) photo_count {
  __photo_count = photo_count;
  __photo_count_isset = YES;
}

- (BOOL) photo_countIsSet {
  return __photo_count_isset;
}

- (void) unsetPhoto_count {
  __photo_count_isset = NO;
}

- (NSString *) content_title {
  return [[__content_title retain_stub] autorelease_stub];
}

- (void) setContent_title: (NSString *) content_title {
  [content_title retain_stub];
  [__content_title release_stub];
  __content_title = content_title;
  __content_title_isset = YES;
}

- (BOOL) content_titleIsSet {
  return __content_title_isset;
}

- (void) unsetContent_title {
  [__content_title release_stub];
  __content_title = nil;
  __content_title_isset = NO;
}

- (NSString *) content_desc {
  return [[__content_desc retain_stub] autorelease_stub];
}

- (void) setContent_desc: (NSString *) content_desc {
  [content_desc retain_stub];
  [__content_desc release_stub];
  __content_desc = content_desc;
  __content_desc_isset = YES;
}

- (BOOL) content_descIsSet {
  return __content_desc_isset;
}

- (void) unsetContent_desc {
  [__content_desc release_stub];
  __content_desc = nil;
  __content_desc_isset = NO;
}

- (int64_t) content_author_id {
  return __content_author_id;
}

- (void) setContent_author_id: (int64_t) content_author_id {
  __content_author_id = content_author_id;
  __content_author_id_isset = YES;
}

- (BOOL) content_author_idIsSet {
  return __content_author_id_isset;
}

- (void) unsetContent_author_id {
  __content_author_id_isset = NO;
}

- (NSString *) content_author_name {
  return [[__content_author_name retain_stub] autorelease_stub];
}

- (void) setContent_author_name: (NSString *) content_author_name {
  [content_author_name retain_stub];
  [__content_author_name release_stub];
  __content_author_name = content_author_name;
  __content_author_name_isset = YES;
}

- (BOOL) content_author_nameIsSet {
  return __content_author_name_isset;
}

- (void) unsetContent_author_name {
  [__content_author_name release_stub];
  __content_author_name = nil;
  __content_author_name_isset = NO;
}

- (NSString *) content_author_domain {
  return [[__content_author_domain retain_stub] autorelease_stub];
}

- (void) setContent_author_domain: (NSString *) content_author_domain {
  [content_author_domain retain_stub];
  [__content_author_domain release_stub];
  __content_author_domain = content_author_domain;
  __content_author_domain_isset = YES;
}

- (BOOL) content_author_domainIsSet {
  return __content_author_domain_isset;
}

- (void) unsetContent_author_domain {
  [__content_author_domain release_stub];
  __content_author_domain = nil;
  __content_author_domain_isset = NO;
}

- (NSString *) create_time {
  return [[__create_time retain_stub] autorelease_stub];
}

- (void) setCreate_time: (NSString *) create_time {
  [create_time retain_stub];
  [__create_time release_stub];
  __create_time = create_time;
  __create_time_isset = YES;
}

- (BOOL) create_timeIsSet {
  return __create_time_isset;
}

- (void) unsetCreate_time {
  [__create_time release_stub];
  __create_time = nil;
  __create_time_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (BOOL) is_recommend {
  return __is_recommend;
}

- (void) setIs_recommend: (BOOL) is_recommend {
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
}

- (BOOL) is_recommendIsSet {
  return __is_recommend_isset;
}

- (void) unsetIs_recommend {
  __is_recommend_isset = NO;
}

- (BOOL) is_delete {
  return __is_delete;
}

- (void) setIs_delete: (BOOL) is_delete {
  __is_delete = is_delete;
  __is_delete_isset = YES;
}

- (BOOL) is_deleteIsSet {
  return __is_delete_isset;
}

- (void) unsetIs_delete {
  __is_delete_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setContent_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContent_type: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setContent_user_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_user_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_user_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_user_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            DynamicContentPhoto *_elem17 = [[DynamicContentPhoto alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPhoto_count: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setContent_author_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_author_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent_author_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreate_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_recommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_delete: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DynamicContent"];
  if (__content_id_isset) {
    [outProtocol writeFieldBeginWithName: @"content_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __content_id];
    [outProtocol writeFieldEnd];
  }
  if (__content_type_isset) {
    [outProtocol writeFieldBeginWithName: @"content_type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __content_type];
    [outProtocol writeFieldEnd];
  }
  if (__content_user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"content_user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __content_user_id];
    [outProtocol writeFieldEnd];
  }
  if (__content_user_name_isset) {
    if (__content_user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"content_user_name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __content_user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_user_avatar_isset) {
    if (__content_user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"content_user_avatar" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __content_user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_user_domain_isset) {
    if (__content_user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"content_user_domain" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __content_user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_list_isset) {
    if (__photo_list != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_list" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_list count]];
        int idx19;
        for (idx19 = 0; idx19 < [__photo_list count]; idx19++)
        {
          [[__photo_list objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_count_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_count" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __photo_count];
    [outProtocol writeFieldEnd];
  }
  if (__content_title_isset) {
    if (__content_title != nil) {
      [outProtocol writeFieldBeginWithName: @"content_title" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __content_title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_desc_isset) {
    if (__content_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"content_desc" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __content_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_author_id_isset) {
    [outProtocol writeFieldBeginWithName: @"content_author_id" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __content_author_id];
    [outProtocol writeFieldEnd];
  }
  if (__content_author_name_isset) {
    if (__content_author_name != nil) {
      [outProtocol writeFieldBeginWithName: @"content_author_name" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __content_author_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_author_domain_isset) {
    if (__content_author_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"content_author_domain" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __content_author_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__create_time_isset) {
    if (__create_time != nil) {
      [outProtocol writeFieldBeginWithName: @"create_time" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __create_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 15];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  if (__is_recommend_isset) {
    [outProtocol writeFieldBeginWithName: @"is_recommend" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __is_recommend];
    [outProtocol writeFieldEnd];
  }
  if (__is_delete_isset) {
    [outProtocol writeFieldBeginWithName: @"is_delete" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __is_delete];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DynamicContent("];
  [ms appendString: @"content_id:"];
  [ms appendFormat: @"%qi", __content_id];
  [ms appendString: @",content_type:"];
  [ms appendFormat: @"%i", __content_type];
  [ms appendString: @",content_user_id:"];
  [ms appendFormat: @"%qi", __content_user_id];
  [ms appendString: @",content_user_name:"];
  [ms appendFormat: @"\"%@\"", __content_user_name];
  [ms appendString: @",content_user_avatar:"];
  [ms appendFormat: @"\"%@\"", __content_user_avatar];
  [ms appendString: @",content_user_domain:"];
  [ms appendFormat: @"\"%@\"", __content_user_domain];
  [ms appendString: @",photo_list:"];
  [ms appendFormat: @"%@", __photo_list];
  [ms appendString: @",photo_count:"];
  [ms appendFormat: @"%i", __photo_count];
  [ms appendString: @",content_title:"];
  [ms appendFormat: @"\"%@\"", __content_title];
  [ms appendString: @",content_desc:"];
  [ms appendFormat: @"\"%@\"", __content_desc];
  [ms appendString: @",content_author_id:"];
  [ms appendFormat: @"%qi", __content_author_id];
  [ms appendString: @",content_author_name:"];
  [ms appendFormat: @"\"%@\"", __content_author_name];
  [ms appendString: @",content_author_domain:"];
  [ms appendFormat: @"\"%@\"", __content_author_domain];
  [ms appendString: @",create_time:"];
  [ms appendFormat: @"\"%@\"", __create_time];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @",is_recommend:"];
  [ms appendFormat: @"%i", __is_recommend];
  [ms appendString: @",is_delete:"];
  [ms appendFormat: @"%i", __is_delete];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetDynamicListRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDynamicListRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDynamicListRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetDynamicListResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count content_list: (NSMutableArray *) content_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __content_list = [content_list retain_stub];
  __content_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"content_list"])
  {
    __content_list = [[decoder decodeObjectForKey: @"content_list"] retain_stub];
    __content_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__content_list_isset)
  {
    [encoder encodeObject: __content_list forKey: @"content_list"];
  }
}

- (void) dealloc
{
  [__content_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) content_list {
  return [[__content_list retain_stub] autorelease_stub];
}

- (void) setContent_list: (NSMutableArray *) content_list {
  [content_list retain_stub];
  [__content_list release_stub];
  __content_list = content_list;
  __content_list_isset = YES;
}

- (BOOL) content_listIsSet {
  return __content_list_isset;
}

- (void) unsetContent_list {
  [__content_list release_stub];
  __content_list = nil;
  __content_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            DynamicContent *_elem22 = [[DynamicContent alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setContent_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDynamicListResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__content_list_isset) {
    if (__content_list != nil) {
      [outProtocol writeFieldBeginWithName: @"content_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__content_list count]];
        int idx24;
        for (idx24 = 0; idx24 < [__content_list count]; idx24++)
        {
          [[__content_list objectAtIndex: idx24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDynamicListResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",content_list:"];
  [ms appendFormat: @"%@", __content_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Album

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAlbum_id: (int64_t) album_id album_name: (NSString *) album_name photo_count: (int32_t) photo_count cover_path: (NSString *) cover_path
{
  self = [super init];
  __album_id = album_id;
  __album_id_isset = YES;
  __album_name = [album_name retain_stub];
  __album_name_isset = YES;
  __photo_count = photo_count;
  __photo_count_isset = YES;
  __cover_path = [cover_path retain_stub];
  __cover_path_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"album_id"])
  {
    __album_id = [decoder decodeInt64ForKey: @"album_id"];
    __album_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_name"])
  {
    __album_name = [[decoder decodeObjectForKey: @"album_name"] retain_stub];
    __album_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_count"])
  {
    __photo_count = [decoder decodeInt32ForKey: @"photo_count"];
    __photo_count_isset = YES;
  }
  if ([decoder containsValueForKey: @"cover_path"])
  {
    __cover_path = [[decoder decodeObjectForKey: @"cover_path"] retain_stub];
    __cover_path_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__album_id_isset)
  {
    [encoder encodeInt64: __album_id forKey: @"album_id"];
  }
  if (__album_name_isset)
  {
    [encoder encodeObject: __album_name forKey: @"album_name"];
  }
  if (__photo_count_isset)
  {
    [encoder encodeInt32: __photo_count forKey: @"photo_count"];
  }
  if (__cover_path_isset)
  {
    [encoder encodeObject: __cover_path forKey: @"cover_path"];
  }
}

- (void) dealloc
{
  [__album_name release_stub];
  [__cover_path release_stub];
  [super dealloc_stub];
}

- (int64_t) album_id {
  return __album_id;
}

- (void) setAlbum_id: (int64_t) album_id {
  __album_id = album_id;
  __album_id_isset = YES;
}

- (BOOL) album_idIsSet {
  return __album_id_isset;
}

- (void) unsetAlbum_id {
  __album_id_isset = NO;
}

- (NSString *) album_name {
  return [[__album_name retain_stub] autorelease_stub];
}

- (void) setAlbum_name: (NSString *) album_name {
  [album_name retain_stub];
  [__album_name release_stub];
  __album_name = album_name;
  __album_name_isset = YES;
}

- (BOOL) album_nameIsSet {
  return __album_name_isset;
}

- (void) unsetAlbum_name {
  [__album_name release_stub];
  __album_name = nil;
  __album_name_isset = NO;
}

- (int32_t) photo_count {
  return __photo_count;
}

- (void) setPhoto_count: (int32_t) photo_count {
  __photo_count = photo_count;
  __photo_count_isset = YES;
}

- (BOOL) photo_countIsSet {
  return __photo_count_isset;
}

- (void) unsetPhoto_count {
  __photo_count_isset = NO;
}

- (NSString *) cover_path {
  return [[__cover_path retain_stub] autorelease_stub];
}

- (void) setCover_path: (NSString *) cover_path {
  [cover_path retain_stub];
  [__cover_path release_stub];
  __cover_path = cover_path;
  __cover_path_isset = YES;
}

- (BOOL) cover_pathIsSet {
  return __cover_path_isset;
}

- (void) unsetCover_path {
  [__cover_path release_stub];
  __cover_path = nil;
  __cover_path_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAlbum_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAlbum_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPhoto_count: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCover_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Album"];
  if (__album_id_isset) {
    [outProtocol writeFieldBeginWithName: @"album_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __album_id];
    [outProtocol writeFieldEnd];
  }
  if (__album_name_isset) {
    if (__album_name != nil) {
      [outProtocol writeFieldBeginWithName: @"album_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __album_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_count_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __photo_count];
    [outProtocol writeFieldEnd];
  }
  if (__cover_path_isset) {
    if (__cover_path != nil) {
      [outProtocol writeFieldBeginWithName: @"cover_path" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __cover_path];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Album("];
  [ms appendString: @"album_id:"];
  [ms appendFormat: @"%qi", __album_id];
  [ms appendString: @",album_name:"];
  [ms appendFormat: @"\"%@\"", __album_name];
  [ms appendString: @",photo_count:"];
  [ms appendFormat: @"%i", __photo_count];
  [ms appendString: @",cover_path:"];
  [ms appendFormat: @"\"%@\"", __cover_path];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAlbumListRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAlbumListRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAlbumListRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAlbumListResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count album_list: (NSMutableArray *) album_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __album_list = [album_list retain_stub];
  __album_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_list"])
  {
    __album_list = [[decoder decodeObjectForKey: @"album_list"] retain_stub];
    __album_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__album_list_isset)
  {
    [encoder encodeObject: __album_list forKey: @"album_list"];
  }
}

- (void) dealloc
{
  [__album_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) album_list {
  return [[__album_list retain_stub] autorelease_stub];
}

- (void) setAlbum_list: (NSMutableArray *) album_list {
  [album_list retain_stub];
  [__album_list release_stub];
  __album_list = album_list;
  __album_list_isset = YES;
}

- (BOOL) album_listIsSet {
  return __album_list_isset;
}

- (void) unsetAlbum_list {
  [__album_list release_stub];
  __album_list = nil;
  __album_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            Album *_elem27 = [[Album alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release_stub];
          }
          [inProtocol readListEnd];
          [self setAlbum_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAlbumListResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__album_list_isset) {
    if (__album_list != nil) {
      [outProtocol writeFieldBeginWithName: @"album_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__album_list count]];
        int idx29;
        for (idx29 = 0; idx29 < [__album_list count]; idx29++)
        {
          [[__album_list objectAtIndex: idx29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAlbumListResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",album_list:"];
  [ms appendFormat: @"%@", __album_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlbumPhoto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path sequence_id: (int32_t) sequence_id is_like: (BOOL) is_like
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  __sequence_id = sequence_id;
  __sequence_id_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"sequence_id"])
  {
    __sequence_id = [decoder decodeInt32ForKey: @"sequence_id"];
    __sequence_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
  if (__sequence_id_isset)
  {
    [encoder encodeInt32: __sequence_id forKey: @"sequence_id"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (int32_t) sequence_id {
  return __sequence_id;
}

- (void) setSequence_id: (int32_t) sequence_id {
  __sequence_id = sequence_id;
  __sequence_id_isset = YES;
}

- (BOOL) sequence_idIsSet {
  return __sequence_id_isset;
}

- (void) unsetSequence_id {
  __sequence_id_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSequence_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AlbumPhoto"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sequence_id_isset) {
    [outProtocol writeFieldBeginWithName: @"sequence_id" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sequence_id];
    [outProtocol writeFieldEnd];
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AlbumPhoto("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @",sequence_id:"];
  [ms appendFormat: @"%i", __sequence_id];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAlbumRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session album_id: (int64_t) album_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __album_id = album_id;
  __album_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_id"])
  {
    __album_id = [decoder decodeInt64ForKey: @"album_id"];
    __album_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__album_id_isset)
  {
    [encoder encodeInt64: __album_id forKey: @"album_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) album_id {
  return __album_id;
}

- (void) setAlbum_id: (int64_t) album_id {
  __album_id = album_id;
  __album_id_isset = YES;
}

- (BOOL) album_idIsSet {
  return __album_id_isset;
}

- (void) unsetAlbum_id {
  __album_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAlbum_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAlbumRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__album_id_isset) {
    [outProtocol writeFieldBeginWithName: @"album_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __album_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAlbumRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",album_id:"];
  [ms appendFormat: @"%qi", __album_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetAlbumResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIs_self: (BOOL) is_self album_id: (int64_t) album_id album_name: (NSString *) album_name album_desc: (NSString *) album_desc cc_protocol: (int32_t) cc_protocol create_time: (NSString *) create_time tags: (NSMutableArray *) tags photo_list: (NSMutableArray *) photo_list author_name: (NSString *) author_name author_domain: (NSString *) author_domain author_avatar: (NSString *) author_avatar
{
  self = [super init];
  __is_self = is_self;
  __is_self_isset = YES;
  __album_id = album_id;
  __album_id_isset = YES;
  __album_name = [album_name retain_stub];
  __album_name_isset = YES;
  __album_desc = [album_desc retain_stub];
  __album_desc_isset = YES;
  __cc_protocol = cc_protocol;
  __cc_protocol_isset = YES;
  __create_time = [create_time retain_stub];
  __create_time_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  __photo_list = [photo_list retain_stub];
  __photo_list_isset = YES;
  __author_name = [author_name retain_stub];
  __author_name_isset = YES;
  __author_domain = [author_domain retain_stub];
  __author_domain_isset = YES;
  __author_avatar = [author_avatar retain_stub];
  __author_avatar_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"is_self"])
  {
    __is_self = [decoder decodeBoolForKey: @"is_self"];
    __is_self_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_id"])
  {
    __album_id = [decoder decodeInt64ForKey: @"album_id"];
    __album_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_name"])
  {
    __album_name = [[decoder decodeObjectForKey: @"album_name"] retain_stub];
    __album_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_desc"])
  {
    __album_desc = [[decoder decodeObjectForKey: @"album_desc"] retain_stub];
    __album_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"cc_protocol"])
  {
    __cc_protocol = [decoder decodeInt32ForKey: @"cc_protocol"];
    __cc_protocol_isset = YES;
  }
  if ([decoder containsValueForKey: @"create_time"])
  {
    __create_time = [[decoder decodeObjectForKey: @"create_time"] retain_stub];
    __create_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_list"])
  {
    __photo_list = [[decoder decodeObjectForKey: @"photo_list"] retain_stub];
    __photo_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_name"])
  {
    __author_name = [[decoder decodeObjectForKey: @"author_name"] retain_stub];
    __author_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_domain"])
  {
    __author_domain = [[decoder decodeObjectForKey: @"author_domain"] retain_stub];
    __author_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_avatar"])
  {
    __author_avatar = [[decoder decodeObjectForKey: @"author_avatar"] retain_stub];
    __author_avatar_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__is_self_isset)
  {
    [encoder encodeBool: __is_self forKey: @"is_self"];
  }
  if (__album_id_isset)
  {
    [encoder encodeInt64: __album_id forKey: @"album_id"];
  }
  if (__album_name_isset)
  {
    [encoder encodeObject: __album_name forKey: @"album_name"];
  }
  if (__album_desc_isset)
  {
    [encoder encodeObject: __album_desc forKey: @"album_desc"];
  }
  if (__cc_protocol_isset)
  {
    [encoder encodeInt32: __cc_protocol forKey: @"cc_protocol"];
  }
  if (__create_time_isset)
  {
    [encoder encodeObject: __create_time forKey: @"create_time"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__photo_list_isset)
  {
    [encoder encodeObject: __photo_list forKey: @"photo_list"];
  }
  if (__author_name_isset)
  {
    [encoder encodeObject: __author_name forKey: @"author_name"];
  }
  if (__author_domain_isset)
  {
    [encoder encodeObject: __author_domain forKey: @"author_domain"];
  }
  if (__author_avatar_isset)
  {
    [encoder encodeObject: __author_avatar forKey: @"author_avatar"];
  }
}

- (void) dealloc
{
  [__album_name release_stub];
  [__album_desc release_stub];
  [__create_time release_stub];
  [__tags release_stub];
  [__photo_list release_stub];
  [__author_name release_stub];
  [__author_domain release_stub];
  [__author_avatar release_stub];
  [super dealloc_stub];
}

- (BOOL) is_self {
  return __is_self;
}

- (void) setIs_self: (BOOL) is_self {
  __is_self = is_self;
  __is_self_isset = YES;
}

- (BOOL) is_selfIsSet {
  return __is_self_isset;
}

- (void) unsetIs_self {
  __is_self_isset = NO;
}

- (int64_t) album_id {
  return __album_id;
}

- (void) setAlbum_id: (int64_t) album_id {
  __album_id = album_id;
  __album_id_isset = YES;
}

- (BOOL) album_idIsSet {
  return __album_id_isset;
}

- (void) unsetAlbum_id {
  __album_id_isset = NO;
}

- (NSString *) album_name {
  return [[__album_name retain_stub] autorelease_stub];
}

- (void) setAlbum_name: (NSString *) album_name {
  [album_name retain_stub];
  [__album_name release_stub];
  __album_name = album_name;
  __album_name_isset = YES;
}

- (BOOL) album_nameIsSet {
  return __album_name_isset;
}

- (void) unsetAlbum_name {
  [__album_name release_stub];
  __album_name = nil;
  __album_name_isset = NO;
}

- (NSString *) album_desc {
  return [[__album_desc retain_stub] autorelease_stub];
}

- (void) setAlbum_desc: (NSString *) album_desc {
  [album_desc retain_stub];
  [__album_desc release_stub];
  __album_desc = album_desc;
  __album_desc_isset = YES;
}

- (BOOL) album_descIsSet {
  return __album_desc_isset;
}

- (void) unsetAlbum_desc {
  [__album_desc release_stub];
  __album_desc = nil;
  __album_desc_isset = NO;
}

- (int32_t) cc_protocol {
  return __cc_protocol;
}

- (void) setCc_protocol: (int32_t) cc_protocol {
  __cc_protocol = cc_protocol;
  __cc_protocol_isset = YES;
}

- (BOOL) cc_protocolIsSet {
  return __cc_protocol_isset;
}

- (void) unsetCc_protocol {
  __cc_protocol_isset = NO;
}

- (NSString *) create_time {
  return [[__create_time retain_stub] autorelease_stub];
}

- (void) setCreate_time: (NSString *) create_time {
  [create_time retain_stub];
  [__create_time release_stub];
  __create_time = create_time;
  __create_time_isset = YES;
}

- (BOOL) create_timeIsSet {
  return __create_time_isset;
}

- (void) unsetCreate_time {
  [__create_time release_stub];
  __create_time = nil;
  __create_time_isset = NO;
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (NSMutableArray *) photo_list {
  return [[__photo_list retain_stub] autorelease_stub];
}

- (void) setPhoto_list: (NSMutableArray *) photo_list {
  [photo_list retain_stub];
  [__photo_list release_stub];
  __photo_list = photo_list;
  __photo_list_isset = YES;
}

- (BOOL) photo_listIsSet {
  return __photo_list_isset;
}

- (void) unsetPhoto_list {
  [__photo_list release_stub];
  __photo_list = nil;
  __photo_list_isset = NO;
}

- (NSString *) author_name {
  return [[__author_name retain_stub] autorelease_stub];
}

- (void) setAuthor_name: (NSString *) author_name {
  [author_name retain_stub];
  [__author_name release_stub];
  __author_name = author_name;
  __author_name_isset = YES;
}

- (BOOL) author_nameIsSet {
  return __author_name_isset;
}

- (void) unsetAuthor_name {
  [__author_name release_stub];
  __author_name = nil;
  __author_name_isset = NO;
}

- (NSString *) author_domain {
  return [[__author_domain retain_stub] autorelease_stub];
}

- (void) setAuthor_domain: (NSString *) author_domain {
  [author_domain retain_stub];
  [__author_domain release_stub];
  __author_domain = author_domain;
  __author_domain_isset = YES;
}

- (BOOL) author_domainIsSet {
  return __author_domain_isset;
}

- (void) unsetAuthor_domain {
  [__author_domain release_stub];
  __author_domain = nil;
  __author_domain_isset = NO;
}

- (NSString *) author_avatar {
  return [[__author_avatar retain_stub] autorelease_stub];
}

- (void) setAuthor_avatar: (NSString *) author_avatar {
  [author_avatar retain_stub];
  [__author_avatar release_stub];
  __author_avatar = author_avatar;
  __author_avatar_isset = YES;
}

- (BOOL) author_avatarIsSet {
  return __author_avatar_isset;
}

- (void) unsetAuthor_avatar {
  [__author_avatar release_stub];
  __author_avatar = nil;
  __author_avatar_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_self: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAlbum_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAlbum_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAlbum_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCc_protocol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreate_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            NSString * _elem32 = [inProtocol readString];
            [fieldValue addObject: _elem32];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size33;
          [inProtocol readListBeginReturningElementType: NULL size: &_size33];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size33];
          int _i34;
          for (_i34 = 0; _i34 < _size33; ++_i34)
          {
            AlbumPhoto *_elem35 = [[AlbumPhoto alloc] init];
            [_elem35 read: inProtocol];
            [fieldValue addObject: _elem35];
            [_elem35 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAlbumResponse"];
  if (__is_self_isset) {
    [outProtocol writeFieldBeginWithName: @"is_self" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __is_self];
    [outProtocol writeFieldEnd];
  }
  if (__album_id_isset) {
    [outProtocol writeFieldBeginWithName: @"album_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __album_id];
    [outProtocol writeFieldEnd];
  }
  if (__album_name_isset) {
    if (__album_name != nil) {
      [outProtocol writeFieldBeginWithName: @"album_name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __album_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__album_desc_isset) {
    if (__album_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"album_desc" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __album_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cc_protocol_isset) {
    [outProtocol writeFieldBeginWithName: @"cc_protocol" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __cc_protocol];
    [outProtocol writeFieldEnd];
  }
  if (__create_time_isset) {
    if (__create_time != nil) {
      [outProtocol writeFieldBeginWithName: @"create_time" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __create_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int idx37;
        for (idx37 = 0; idx37 < [__tags count]; idx37++)
        {
          [outProtocol writeString: [__tags objectAtIndex: idx37]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_list_isset) {
    if (__photo_list != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_list" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_list count]];
        int idx39;
        for (idx39 = 0; idx39 < [__photo_list count]; idx39++)
        {
          [[__photo_list objectAtIndex: idx39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_name_isset) {
    if (__author_name != nil) {
      [outProtocol writeFieldBeginWithName: @"author_name" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __author_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_domain_isset) {
    if (__author_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"author_domain" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __author_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_avatar_isset) {
    if (__author_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"author_avatar" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __author_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAlbumResponse("];
  [ms appendString: @"is_self:"];
  [ms appendFormat: @"%i", __is_self];
  [ms appendString: @",album_id:"];
  [ms appendFormat: @"%qi", __album_id];
  [ms appendString: @",album_name:"];
  [ms appendFormat: @"\"%@\"", __album_name];
  [ms appendString: @",album_desc:"];
  [ms appendFormat: @"\"%@\"", __album_desc];
  [ms appendString: @",cc_protocol:"];
  [ms appendFormat: @"%i", __cc_protocol];
  [ms appendString: @",create_time:"];
  [ms appendFormat: @"\"%@\"", __create_time];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @",photo_list:"];
  [ms appendFormat: @"%@", __photo_list];
  [ms appendString: @",author_name:"];
  [ms appendFormat: @"\"%@\"", __author_name];
  [ms appendString: @",author_domain:"];
  [ms appendFormat: @"\"%@\"", __author_domain];
  [ms appendString: @",author_avatar:"];
  [ms appendFormat: @"\"%@\"", __author_avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Photo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path sequence_id: (int32_t) sequence_id temperature: (int32_t) temperature is_like: (BOOL) is_like is_favorite: (BOOL) is_favorite is_recommend: (BOOL) is_recommend
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  __sequence_id = sequence_id;
  __sequence_id_isset = YES;
  __temperature = temperature;
  __temperature_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  __is_favorite = is_favorite;
  __is_favorite_isset = YES;
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"sequence_id"])
  {
    __sequence_id = [decoder decodeInt32ForKey: @"sequence_id"];
    __sequence_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"temperature"])
  {
    __temperature = [decoder decodeInt32ForKey: @"temperature"];
    __temperature_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_favorite"])
  {
    __is_favorite = [decoder decodeBoolForKey: @"is_favorite"];
    __is_favorite_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_recommend"])
  {
    __is_recommend = [decoder decodeBoolForKey: @"is_recommend"];
    __is_recommend_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
  if (__sequence_id_isset)
  {
    [encoder encodeInt32: __sequence_id forKey: @"sequence_id"];
  }
  if (__temperature_isset)
  {
    [encoder encodeInt32: __temperature forKey: @"temperature"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
  if (__is_favorite_isset)
  {
    [encoder encodeBool: __is_favorite forKey: @"is_favorite"];
  }
  if (__is_recommend_isset)
  {
    [encoder encodeBool: __is_recommend forKey: @"is_recommend"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (int32_t) sequence_id {
  return __sequence_id;
}

- (void) setSequence_id: (int32_t) sequence_id {
  __sequence_id = sequence_id;
  __sequence_id_isset = YES;
}

- (BOOL) sequence_idIsSet {
  return __sequence_id_isset;
}

- (void) unsetSequence_id {
  __sequence_id_isset = NO;
}

- (int32_t) temperature {
  return __temperature;
}

- (void) setTemperature: (int32_t) temperature {
  __temperature = temperature;
  __temperature_isset = YES;
}

- (BOOL) temperatureIsSet {
  return __temperature_isset;
}

- (void) unsetTemperature {
  __temperature_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (BOOL) is_favorite {
  return __is_favorite;
}

- (void) setIs_favorite: (BOOL) is_favorite {
  __is_favorite = is_favorite;
  __is_favorite_isset = YES;
}

- (BOOL) is_favoriteIsSet {
  return __is_favorite_isset;
}

- (void) unsetIs_favorite {
  __is_favorite_isset = NO;
}

- (BOOL) is_recommend {
  return __is_recommend;
}

- (void) setIs_recommend: (BOOL) is_recommend {
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
}

- (BOOL) is_recommendIsSet {
  return __is_recommend_isset;
}

- (void) unsetIs_recommend {
  __is_recommend_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSequence_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTemperature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_favorite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_recommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Photo"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sequence_id_isset) {
    [outProtocol writeFieldBeginWithName: @"sequence_id" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sequence_id];
    [outProtocol writeFieldEnd];
  }
  if (__temperature_isset) {
    [outProtocol writeFieldBeginWithName: @"temperature" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __temperature];
    [outProtocol writeFieldEnd];
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  if (__is_favorite_isset) {
    [outProtocol writeFieldBeginWithName: @"is_favorite" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __is_favorite];
    [outProtocol writeFieldEnd];
  }
  if (__is_recommend_isset) {
    [outProtocol writeFieldBeginWithName: @"is_recommend" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __is_recommend];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Photo("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @",sequence_id:"];
  [ms appendFormat: @"%i", __sequence_id];
  [ms appendString: @",temperature:"];
  [ms appendFormat: @"%i", __temperature];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @",is_favorite:"];
  [ms appendFormat: @"%i", __is_favorite];
  [ms appendString: @",is_recommend:"];
  [ms appendFormat: @"%i", __is_recommend];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path album_id: (int64_t) album_id album_name: (NSString *) album_name author_id: (int64_t) author_id author_name: (NSString *) author_name author_avatar: (NSString *) author_avatar author_domain: (NSString *) author_domain cc_protocol: (int32_t) cc_protocol photo_list: (NSMutableArray *) photo_list
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  __album_id = album_id;
  __album_id_isset = YES;
  __album_name = [album_name retain_stub];
  __album_name_isset = YES;
  __author_id = author_id;
  __author_id_isset = YES;
  __author_name = [author_name retain_stub];
  __author_name_isset = YES;
  __author_avatar = [author_avatar retain_stub];
  __author_avatar_isset = YES;
  __author_domain = [author_domain retain_stub];
  __author_domain_isset = YES;
  __cc_protocol = cc_protocol;
  __cc_protocol_isset = YES;
  __photo_list = [photo_list retain_stub];
  __photo_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_id"])
  {
    __album_id = [decoder decodeInt64ForKey: @"album_id"];
    __album_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_name"])
  {
    __album_name = [[decoder decodeObjectForKey: @"album_name"] retain_stub];
    __album_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_id"])
  {
    __author_id = [decoder decodeInt64ForKey: @"author_id"];
    __author_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_name"])
  {
    __author_name = [[decoder decodeObjectForKey: @"author_name"] retain_stub];
    __author_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_avatar"])
  {
    __author_avatar = [[decoder decodeObjectForKey: @"author_avatar"] retain_stub];
    __author_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_domain"])
  {
    __author_domain = [[decoder decodeObjectForKey: @"author_domain"] retain_stub];
    __author_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"cc_protocol"])
  {
    __cc_protocol = [decoder decodeInt32ForKey: @"cc_protocol"];
    __cc_protocol_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_list"])
  {
    __photo_list = [[decoder decodeObjectForKey: @"photo_list"] retain_stub];
    __photo_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
  if (__album_id_isset)
  {
    [encoder encodeInt64: __album_id forKey: @"album_id"];
  }
  if (__album_name_isset)
  {
    [encoder encodeObject: __album_name forKey: @"album_name"];
  }
  if (__author_id_isset)
  {
    [encoder encodeInt64: __author_id forKey: @"author_id"];
  }
  if (__author_name_isset)
  {
    [encoder encodeObject: __author_name forKey: @"author_name"];
  }
  if (__author_avatar_isset)
  {
    [encoder encodeObject: __author_avatar forKey: @"author_avatar"];
  }
  if (__author_domain_isset)
  {
    [encoder encodeObject: __author_domain forKey: @"author_domain"];
  }
  if (__cc_protocol_isset)
  {
    [encoder encodeInt32: __cc_protocol forKey: @"cc_protocol"];
  }
  if (__photo_list_isset)
  {
    [encoder encodeObject: __photo_list forKey: @"photo_list"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [__album_name release_stub];
  [__author_name release_stub];
  [__author_avatar release_stub];
  [__author_domain release_stub];
  [__photo_list release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (int64_t) album_id {
  return __album_id;
}

- (void) setAlbum_id: (int64_t) album_id {
  __album_id = album_id;
  __album_id_isset = YES;
}

- (BOOL) album_idIsSet {
  return __album_id_isset;
}

- (void) unsetAlbum_id {
  __album_id_isset = NO;
}

- (NSString *) album_name {
  return [[__album_name retain_stub] autorelease_stub];
}

- (void) setAlbum_name: (NSString *) album_name {
  [album_name retain_stub];
  [__album_name release_stub];
  __album_name = album_name;
  __album_name_isset = YES;
}

- (BOOL) album_nameIsSet {
  return __album_name_isset;
}

- (void) unsetAlbum_name {
  [__album_name release_stub];
  __album_name = nil;
  __album_name_isset = NO;
}

- (int64_t) author_id {
  return __author_id;
}

- (void) setAuthor_id: (int64_t) author_id {
  __author_id = author_id;
  __author_id_isset = YES;
}

- (BOOL) author_idIsSet {
  return __author_id_isset;
}

- (void) unsetAuthor_id {
  __author_id_isset = NO;
}

- (NSString *) author_name {
  return [[__author_name retain_stub] autorelease_stub];
}

- (void) setAuthor_name: (NSString *) author_name {
  [author_name retain_stub];
  [__author_name release_stub];
  __author_name = author_name;
  __author_name_isset = YES;
}

- (BOOL) author_nameIsSet {
  return __author_name_isset;
}

- (void) unsetAuthor_name {
  [__author_name release_stub];
  __author_name = nil;
  __author_name_isset = NO;
}

- (NSString *) author_avatar {
  return [[__author_avatar retain_stub] autorelease_stub];
}

- (void) setAuthor_avatar: (NSString *) author_avatar {
  [author_avatar retain_stub];
  [__author_avatar release_stub];
  __author_avatar = author_avatar;
  __author_avatar_isset = YES;
}

- (BOOL) author_avatarIsSet {
  return __author_avatar_isset;
}

- (void) unsetAuthor_avatar {
  [__author_avatar release_stub];
  __author_avatar = nil;
  __author_avatar_isset = NO;
}

- (NSString *) author_domain {
  return [[__author_domain retain_stub] autorelease_stub];
}

- (void) setAuthor_domain: (NSString *) author_domain {
  [author_domain retain_stub];
  [__author_domain release_stub];
  __author_domain = author_domain;
  __author_domain_isset = YES;
}

- (BOOL) author_domainIsSet {
  return __author_domain_isset;
}

- (void) unsetAuthor_domain {
  [__author_domain release_stub];
  __author_domain = nil;
  __author_domain_isset = NO;
}

- (int32_t) cc_protocol {
  return __cc_protocol;
}

- (void) setCc_protocol: (int32_t) cc_protocol {
  __cc_protocol = cc_protocol;
  __cc_protocol_isset = YES;
}

- (BOOL) cc_protocolIsSet {
  return __cc_protocol_isset;
}

- (void) unsetCc_protocol {
  __cc_protocol_isset = NO;
}

- (NSMutableArray *) photo_list {
  return [[__photo_list retain_stub] autorelease_stub];
}

- (void) setPhoto_list: (NSMutableArray *) photo_list {
  [photo_list retain_stub];
  [__photo_list release_stub];
  __photo_list = photo_list;
  __photo_list_isset = YES;
}

- (BOOL) photo_listIsSet {
  return __photo_list_isset;
}

- (void) unsetPhoto_list {
  [__photo_list release_stub];
  __photo_list = nil;
  __photo_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAlbum_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAlbum_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthor_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCc_protocol: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            Photo *_elem42 = [[Photo alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoResponse"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__album_id_isset) {
    [outProtocol writeFieldBeginWithName: @"album_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __album_id];
    [outProtocol writeFieldEnd];
  }
  if (__album_name_isset) {
    if (__album_name != nil) {
      [outProtocol writeFieldBeginWithName: @"album_name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __album_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_id_isset) {
    [outProtocol writeFieldBeginWithName: @"author_id" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __author_id];
    [outProtocol writeFieldEnd];
  }
  if (__author_name_isset) {
    if (__author_name != nil) {
      [outProtocol writeFieldBeginWithName: @"author_name" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __author_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_avatar_isset) {
    if (__author_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"author_avatar" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __author_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_domain_isset) {
    if (__author_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"author_domain" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __author_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cc_protocol_isset) {
    [outProtocol writeFieldBeginWithName: @"cc_protocol" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __cc_protocol];
    [outProtocol writeFieldEnd];
  }
  if (__photo_list_isset) {
    if (__photo_list != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_list" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_list count]];
        int idx44;
        for (idx44 = 0; idx44 < [__photo_list count]; idx44++)
        {
          [[__photo_list objectAtIndex: idx44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoResponse("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @",album_id:"];
  [ms appendFormat: @"%qi", __album_id];
  [ms appendString: @",album_name:"];
  [ms appendFormat: @"\"%@\"", __album_name];
  [ms appendString: @",author_id:"];
  [ms appendFormat: @"%qi", __author_id];
  [ms appendString: @",author_name:"];
  [ms appendFormat: @"\"%@\"", __author_name];
  [ms appendString: @",author_avatar:"];
  [ms appendFormat: @"\"%@\"", __author_avatar];
  [ms appendString: @",author_domain:"];
  [ms appendFormat: @"\"%@\"", __author_domain];
  [ms appendString: @",cc_protocol:"];
  [ms appendFormat: @"%i", __cc_protocol];
  [ms appendString: @",photo_list:"];
  [ms appendFormat: @"%@", __photo_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecommendPhoto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendPhoto"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendPhoto("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoRecommendRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session album_id: (int64_t) album_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __album_id = album_id;
  __album_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"album_id"])
  {
    __album_id = [decoder decodeInt64ForKey: @"album_id"];
    __album_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__album_id_isset)
  {
    [encoder encodeInt64: __album_id forKey: @"album_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) album_id {
  return __album_id;
}

- (void) setAlbum_id: (int64_t) album_id {
  __album_id = album_id;
  __album_id_isset = YES;
}

- (BOOL) album_idIsSet {
  return __album_id_isset;
}

- (void) unsetAlbum_id {
  __album_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAlbum_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoRecommendRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__album_id_isset) {
    [outProtocol writeFieldBeginWithName: @"album_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __album_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoRecommendRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",album_id:"];
  [ms appendFormat: @"%qi", __album_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoRecommendResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_list: (NSMutableArray *) photo_list
{
  self = [super init];
  __photo_list = [photo_list retain_stub];
  __photo_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_list"])
  {
    __photo_list = [[decoder decodeObjectForKey: @"photo_list"] retain_stub];
    __photo_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_list_isset)
  {
    [encoder encodeObject: __photo_list forKey: @"photo_list"];
  }
}

- (void) dealloc
{
  [__photo_list release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) photo_list {
  return [[__photo_list retain_stub] autorelease_stub];
}

- (void) setPhoto_list: (NSMutableArray *) photo_list {
  [photo_list retain_stub];
  [__photo_list release_stub];
  __photo_list = photo_list;
  __photo_list_isset = YES;
}

- (BOOL) photo_listIsSet {
  return __photo_list_isset;
}

- (void) unsetPhoto_list {
  [__photo_list release_stub];
  __photo_list = nil;
  __photo_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            RecommendPhoto *_elem47 = [[RecommendPhoto alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoRecommendResponse"];
  if (__photo_list_isset) {
    if (__photo_list != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_list count]];
        int idx49;
        for (idx49 = 0; idx49 < [__photo_list count]; idx49++)
        {
          [[__photo_list objectAtIndex: idx49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoRecommendResponse("];
  [ms appendString: @"photo_list:"];
  [ms appendFormat: @"%@", __photo_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Comment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComment_id: (int64_t) comment_id comment_text: (NSString *) comment_text comment_user_id: (int64_t) comment_user_id comment_user_name: (NSString *) comment_user_name comment_user_avatar: (NSString *) comment_user_avatar comment_user_domain: (NSString *) comment_user_domain reply_user_id: (int64_t) reply_user_id reply_user_name: (NSString *) reply_user_name reply_user_domain: (NSString *) reply_user_domain create_time: (NSString *) create_time is_self: (BOOL) is_self
{
  self = [super init];
  __comment_id = comment_id;
  __comment_id_isset = YES;
  __comment_text = [comment_text retain_stub];
  __comment_text_isset = YES;
  __comment_user_id = comment_user_id;
  __comment_user_id_isset = YES;
  __comment_user_name = [comment_user_name retain_stub];
  __comment_user_name_isset = YES;
  __comment_user_avatar = [comment_user_avatar retain_stub];
  __comment_user_avatar_isset = YES;
  __comment_user_domain = [comment_user_domain retain_stub];
  __comment_user_domain_isset = YES;
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
  __reply_user_name = [reply_user_name retain_stub];
  __reply_user_name_isset = YES;
  __reply_user_domain = [reply_user_domain retain_stub];
  __reply_user_domain_isset = YES;
  __create_time = [create_time retain_stub];
  __create_time_isset = YES;
  __is_self = is_self;
  __is_self_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comment_id"])
  {
    __comment_id = [decoder decodeInt64ForKey: @"comment_id"];
    __comment_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_text"])
  {
    __comment_text = [[decoder decodeObjectForKey: @"comment_text"] retain_stub];
    __comment_text_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_user_id"])
  {
    __comment_user_id = [decoder decodeInt64ForKey: @"comment_user_id"];
    __comment_user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_user_name"])
  {
    __comment_user_name = [[decoder decodeObjectForKey: @"comment_user_name"] retain_stub];
    __comment_user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_user_avatar"])
  {
    __comment_user_avatar = [[decoder decodeObjectForKey: @"comment_user_avatar"] retain_stub];
    __comment_user_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_user_domain"])
  {
    __comment_user_domain = [[decoder decodeObjectForKey: @"comment_user_domain"] retain_stub];
    __comment_user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"reply_user_id"])
  {
    __reply_user_id = [decoder decodeInt64ForKey: @"reply_user_id"];
    __reply_user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"reply_user_name"])
  {
    __reply_user_name = [[decoder decodeObjectForKey: @"reply_user_name"] retain_stub];
    __reply_user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"reply_user_domain"])
  {
    __reply_user_domain = [[decoder decodeObjectForKey: @"reply_user_domain"] retain_stub];
    __reply_user_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"create_time"])
  {
    __create_time = [[decoder decodeObjectForKey: @"create_time"] retain_stub];
    __create_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_self"])
  {
    __is_self = [decoder decodeBoolForKey: @"is_self"];
    __is_self_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comment_id_isset)
  {
    [encoder encodeInt64: __comment_id forKey: @"comment_id"];
  }
  if (__comment_text_isset)
  {
    [encoder encodeObject: __comment_text forKey: @"comment_text"];
  }
  if (__comment_user_id_isset)
  {
    [encoder encodeInt64: __comment_user_id forKey: @"comment_user_id"];
  }
  if (__comment_user_name_isset)
  {
    [encoder encodeObject: __comment_user_name forKey: @"comment_user_name"];
  }
  if (__comment_user_avatar_isset)
  {
    [encoder encodeObject: __comment_user_avatar forKey: @"comment_user_avatar"];
  }
  if (__comment_user_domain_isset)
  {
    [encoder encodeObject: __comment_user_domain forKey: @"comment_user_domain"];
  }
  if (__reply_user_id_isset)
  {
    [encoder encodeInt64: __reply_user_id forKey: @"reply_user_id"];
  }
  if (__reply_user_name_isset)
  {
    [encoder encodeObject: __reply_user_name forKey: @"reply_user_name"];
  }
  if (__reply_user_domain_isset)
  {
    [encoder encodeObject: __reply_user_domain forKey: @"reply_user_domain"];
  }
  if (__create_time_isset)
  {
    [encoder encodeObject: __create_time forKey: @"create_time"];
  }
  if (__is_self_isset)
  {
    [encoder encodeBool: __is_self forKey: @"is_self"];
  }
}

- (void) dealloc
{
  [__comment_text release_stub];
  [__comment_user_name release_stub];
  [__comment_user_avatar release_stub];
  [__comment_user_domain release_stub];
  [__reply_user_name release_stub];
  [__reply_user_domain release_stub];
  [__create_time release_stub];
  [super dealloc_stub];
}

- (int64_t) comment_id {
  return __comment_id;
}

- (void) setComment_id: (int64_t) comment_id {
  __comment_id = comment_id;
  __comment_id_isset = YES;
}

- (BOOL) comment_idIsSet {
  return __comment_id_isset;
}

- (void) unsetComment_id {
  __comment_id_isset = NO;
}

- (NSString *) comment_text {
  return [[__comment_text retain_stub] autorelease_stub];
}

- (void) setComment_text: (NSString *) comment_text {
  [comment_text retain_stub];
  [__comment_text release_stub];
  __comment_text = comment_text;
  __comment_text_isset = YES;
}

- (BOOL) comment_textIsSet {
  return __comment_text_isset;
}

- (void) unsetComment_text {
  [__comment_text release_stub];
  __comment_text = nil;
  __comment_text_isset = NO;
}

- (int64_t) comment_user_id {
  return __comment_user_id;
}

- (void) setComment_user_id: (int64_t) comment_user_id {
  __comment_user_id = comment_user_id;
  __comment_user_id_isset = YES;
}

- (BOOL) comment_user_idIsSet {
  return __comment_user_id_isset;
}

- (void) unsetComment_user_id {
  __comment_user_id_isset = NO;
}

- (NSString *) comment_user_name {
  return [[__comment_user_name retain_stub] autorelease_stub];
}

- (void) setComment_user_name: (NSString *) comment_user_name {
  [comment_user_name retain_stub];
  [__comment_user_name release_stub];
  __comment_user_name = comment_user_name;
  __comment_user_name_isset = YES;
}

- (BOOL) comment_user_nameIsSet {
  return __comment_user_name_isset;
}

- (void) unsetComment_user_name {
  [__comment_user_name release_stub];
  __comment_user_name = nil;
  __comment_user_name_isset = NO;
}

- (NSString *) comment_user_avatar {
  return [[__comment_user_avatar retain_stub] autorelease_stub];
}

- (void) setComment_user_avatar: (NSString *) comment_user_avatar {
  [comment_user_avatar retain_stub];
  [__comment_user_avatar release_stub];
  __comment_user_avatar = comment_user_avatar;
  __comment_user_avatar_isset = YES;
}

- (BOOL) comment_user_avatarIsSet {
  return __comment_user_avatar_isset;
}

- (void) unsetComment_user_avatar {
  [__comment_user_avatar release_stub];
  __comment_user_avatar = nil;
  __comment_user_avatar_isset = NO;
}

- (NSString *) comment_user_domain {
  return [[__comment_user_domain retain_stub] autorelease_stub];
}

- (void) setComment_user_domain: (NSString *) comment_user_domain {
  [comment_user_domain retain_stub];
  [__comment_user_domain release_stub];
  __comment_user_domain = comment_user_domain;
  __comment_user_domain_isset = YES;
}

- (BOOL) comment_user_domainIsSet {
  return __comment_user_domain_isset;
}

- (void) unsetComment_user_domain {
  [__comment_user_domain release_stub];
  __comment_user_domain = nil;
  __comment_user_domain_isset = NO;
}

- (int64_t) reply_user_id {
  return __reply_user_id;
}

- (void) setReply_user_id: (int64_t) reply_user_id {
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
}

- (BOOL) reply_user_idIsSet {
  return __reply_user_id_isset;
}

- (void) unsetReply_user_id {
  __reply_user_id_isset = NO;
}

- (NSString *) reply_user_name {
  return [[__reply_user_name retain_stub] autorelease_stub];
}

- (void) setReply_user_name: (NSString *) reply_user_name {
  [reply_user_name retain_stub];
  [__reply_user_name release_stub];
  __reply_user_name = reply_user_name;
  __reply_user_name_isset = YES;
}

- (BOOL) reply_user_nameIsSet {
  return __reply_user_name_isset;
}

- (void) unsetReply_user_name {
  [__reply_user_name release_stub];
  __reply_user_name = nil;
  __reply_user_name_isset = NO;
}

- (NSString *) reply_user_domain {
  return [[__reply_user_domain retain_stub] autorelease_stub];
}

- (void) setReply_user_domain: (NSString *) reply_user_domain {
  [reply_user_domain retain_stub];
  [__reply_user_domain release_stub];
  __reply_user_domain = reply_user_domain;
  __reply_user_domain_isset = YES;
}

- (BOOL) reply_user_domainIsSet {
  return __reply_user_domain_isset;
}

- (void) unsetReply_user_domain {
  [__reply_user_domain release_stub];
  __reply_user_domain = nil;
  __reply_user_domain_isset = NO;
}

- (NSString *) create_time {
  return [[__create_time retain_stub] autorelease_stub];
}

- (void) setCreate_time: (NSString *) create_time {
  [create_time retain_stub];
  [__create_time release_stub];
  __create_time = create_time;
  __create_time_isset = YES;
}

- (BOOL) create_timeIsSet {
  return __create_time_isset;
}

- (void) unsetCreate_time {
  [__create_time release_stub];
  __create_time = nil;
  __create_time_isset = NO;
}

- (BOOL) is_self {
  return __is_self;
}

- (void) setIs_self: (BOOL) is_self {
  __is_self = is_self;
  __is_self_isset = YES;
}

- (BOOL) is_selfIsSet {
  return __is_self_isset;
}

- (void) unsetIs_self {
  __is_self_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setComment_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_text: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setComment_user_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_user_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_user_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_user_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReply_user_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReply_user_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReply_user_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreate_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_self: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Comment"];
  if (__comment_id_isset) {
    [outProtocol writeFieldBeginWithName: @"comment_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __comment_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_text_isset) {
    if (__comment_text != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_text" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __comment_text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comment_user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"comment_user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __comment_user_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_user_name_isset) {
    if (__comment_user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_user_name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __comment_user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comment_user_avatar_isset) {
    if (__comment_user_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_user_avatar" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __comment_user_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__comment_user_domain_isset) {
    if (__comment_user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_user_domain" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __comment_user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reply_user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"reply_user_id" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __reply_user_id];
    [outProtocol writeFieldEnd];
  }
  if (__reply_user_name_isset) {
    if (__reply_user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"reply_user_name" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __reply_user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reply_user_domain_isset) {
    if (__reply_user_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"reply_user_domain" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __reply_user_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__create_time_isset) {
    if (__create_time != nil) {
      [outProtocol writeFieldBeginWithName: @"create_time" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __create_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_self_isset) {
    [outProtocol writeFieldBeginWithName: @"is_self" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __is_self];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Comment("];
  [ms appendString: @"comment_id:"];
  [ms appendFormat: @"%qi", __comment_id];
  [ms appendString: @",comment_text:"];
  [ms appendFormat: @"\"%@\"", __comment_text];
  [ms appendString: @",comment_user_id:"];
  [ms appendFormat: @"%qi", __comment_user_id];
  [ms appendString: @",comment_user_name:"];
  [ms appendFormat: @"\"%@\"", __comment_user_name];
  [ms appendString: @",comment_user_avatar:"];
  [ms appendFormat: @"\"%@\"", __comment_user_avatar];
  [ms appendString: @",comment_user_domain:"];
  [ms appendFormat: @"\"%@\"", __comment_user_domain];
  [ms appendString: @",reply_user_id:"];
  [ms appendFormat: @"%qi", __reply_user_id];
  [ms appendString: @",reply_user_name:"];
  [ms appendFormat: @"\"%@\"", __reply_user_name];
  [ms appendString: @",reply_user_domain:"];
  [ms appendFormat: @"\"%@\"", __reply_user_domain];
  [ms appendString: @",create_time:"];
  [ms appendFormat: @"\"%@\"", __create_time];
  [ms appendString: @",is_self:"];
  [ms appendFormat: @"%i", __is_self];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPhotoCommentResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size comment_list: (NSMutableArray *) comment_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __comment_list = [comment_list retain_stub];
  __comment_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_list"])
  {
    __comment_list = [[decoder decodeObjectForKey: @"comment_list"] retain_stub];
    __comment_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__comment_list_isset)
  {
    [encoder encodeObject: __comment_list forKey: @"comment_list"];
  }
}

- (void) dealloc
{
  [__comment_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (NSMutableArray *) comment_list {
  return [[__comment_list retain_stub] autorelease_stub];
}

- (void) setComment_list: (NSMutableArray *) comment_list {
  [comment_list retain_stub];
  [__comment_list release_stub];
  __comment_list = comment_list;
  __comment_list_isset = YES;
}

- (BOOL) comment_listIsSet {
  return __comment_list_isset;
}

- (void) unsetComment_list {
  [__comment_list release_stub];
  __comment_list = nil;
  __comment_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            Comment *_elem52 = [[Comment alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setComment_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPhotoCommentResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__comment_list_isset) {
    if (__comment_list != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_list" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__comment_list count]];
        int idx54;
        for (idx54 = 0; idx54 < [__comment_list count]; idx54++)
        {
          [[__comment_list objectAtIndex: idx54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPhotoCommentResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",comment_list:"];
  [ms appendFormat: @"%@", __comment_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPhotoCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session reply_user_id: (int64_t) reply_user_id photo_id: (int64_t) photo_id comment_text: (NSString *) comment_text
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __comment_text = [comment_text retain_stub];
  __comment_text_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"reply_user_id"])
  {
    __reply_user_id = [decoder decodeInt64ForKey: @"reply_user_id"];
    __reply_user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_text"])
  {
    __comment_text = [[decoder decodeObjectForKey: @"comment_text"] retain_stub];
    __comment_text_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__reply_user_id_isset)
  {
    [encoder encodeInt64: __reply_user_id forKey: @"reply_user_id"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__comment_text_isset)
  {
    [encoder encodeObject: __comment_text forKey: @"comment_text"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__comment_text release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) reply_user_id {
  return __reply_user_id;
}

- (void) setReply_user_id: (int64_t) reply_user_id {
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
}

- (BOOL) reply_user_idIsSet {
  return __reply_user_id_isset;
}

- (void) unsetReply_user_id {
  __reply_user_id_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) comment_text {
  return [[__comment_text retain_stub] autorelease_stub];
}

- (void) setComment_text: (NSString *) comment_text {
  [comment_text retain_stub];
  [__comment_text release_stub];
  __comment_text = comment_text;
  __comment_text_isset = YES;
}

- (BOOL) comment_textIsSet {
  return __comment_text_isset;
}

- (void) unsetComment_text {
  [__comment_text release_stub];
  __comment_text = nil;
  __comment_text_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReply_user_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_text: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhotoCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reply_user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"reply_user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __reply_user_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_text_isset) {
    if (__comment_text != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_text" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __comment_text];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhotoCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",reply_user_id:"];
  [ms appendFormat: @"%qi", __reply_user_id];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",comment_text:"];
  [ms appendFormat: @"\"%@\"", __comment_text];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPhotoCommentResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComment: (Comment *) comment
{
  self = [super init];
  __comment = [comment retain_stub];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (void) dealloc
{
  [__comment release_stub];
  [super dealloc_stub];
}

- (Comment *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (Comment *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Comment *fieldValue = [[Comment alloc] init];
          [fieldValue read: inProtocol];
          [self setComment: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPhotoCommentResponse"];
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
      [__comment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPhotoCommentResponse("];
  [ms appendString: @"comment:"];
  [ms appendFormat: @"%@", __comment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePhotoCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session photo_id: (int64_t) photo_id comment_id: (int64_t) comment_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __comment_id = comment_id;
  __comment_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_id"])
  {
    __comment_id = [decoder decodeInt64ForKey: @"comment_id"];
    __comment_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__comment_id_isset)
  {
    [encoder encodeInt64: __comment_id forKey: @"comment_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (int64_t) comment_id {
  return __comment_id;
}

- (void) setComment_id: (int64_t) comment_id {
  __comment_id = comment_id;
  __comment_id_isset = YES;
}

- (BOOL) comment_idIsSet {
  return __comment_id_isset;
}

- (void) unsetComment_id {
  __comment_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setComment_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePhotoCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_id_isset) {
    [outProtocol writeFieldBeginWithName: @"comment_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __comment_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePhotoCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",comment_id:"];
  [ms appendFormat: @"%qi", __comment_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Pocket

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPocket_id: (int64_t) pocket_id pocket_title: (NSString *) pocket_title pocket_second_title: (NSString *) pocket_second_title cover_photo: (NSString *) cover_photo create_time: (NSString *) create_time is_like: (BOOL) is_like is_recommend: (BOOL) is_recommend
{
  self = [super init];
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __pocket_title = [pocket_title retain_stub];
  __pocket_title_isset = YES;
  __pocket_second_title = [pocket_second_title retain_stub];
  __pocket_second_title_isset = YES;
  __cover_photo = [cover_photo retain_stub];
  __cover_photo_isset = YES;
  __create_time = [create_time retain_stub];
  __create_time_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_title"])
  {
    __pocket_title = [[decoder decodeObjectForKey: @"pocket_title"] retain_stub];
    __pocket_title_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_second_title"])
  {
    __pocket_second_title = [[decoder decodeObjectForKey: @"pocket_second_title"] retain_stub];
    __pocket_second_title_isset = YES;
  }
  if ([decoder containsValueForKey: @"cover_photo"])
  {
    __cover_photo = [[decoder decodeObjectForKey: @"cover_photo"] retain_stub];
    __cover_photo_isset = YES;
  }
  if ([decoder containsValueForKey: @"create_time"])
  {
    __create_time = [[decoder decodeObjectForKey: @"create_time"] retain_stub];
    __create_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_recommend"])
  {
    __is_recommend = [decoder decodeBoolForKey: @"is_recommend"];
    __is_recommend_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__pocket_title_isset)
  {
    [encoder encodeObject: __pocket_title forKey: @"pocket_title"];
  }
  if (__pocket_second_title_isset)
  {
    [encoder encodeObject: __pocket_second_title forKey: @"pocket_second_title"];
  }
  if (__cover_photo_isset)
  {
    [encoder encodeObject: __cover_photo forKey: @"cover_photo"];
  }
  if (__create_time_isset)
  {
    [encoder encodeObject: __create_time forKey: @"create_time"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
  if (__is_recommend_isset)
  {
    [encoder encodeBool: __is_recommend forKey: @"is_recommend"];
  }
}

- (void) dealloc
{
  [__pocket_title release_stub];
  [__pocket_second_title release_stub];
  [__cover_photo release_stub];
  [__create_time release_stub];
  [super dealloc_stub];
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (NSString *) pocket_title {
  return [[__pocket_title retain_stub] autorelease_stub];
}

- (void) setPocket_title: (NSString *) pocket_title {
  [pocket_title retain_stub];
  [__pocket_title release_stub];
  __pocket_title = pocket_title;
  __pocket_title_isset = YES;
}

- (BOOL) pocket_titleIsSet {
  return __pocket_title_isset;
}

- (void) unsetPocket_title {
  [__pocket_title release_stub];
  __pocket_title = nil;
  __pocket_title_isset = NO;
}

- (NSString *) pocket_second_title {
  return [[__pocket_second_title retain_stub] autorelease_stub];
}

- (void) setPocket_second_title: (NSString *) pocket_second_title {
  [pocket_second_title retain_stub];
  [__pocket_second_title release_stub];
  __pocket_second_title = pocket_second_title;
  __pocket_second_title_isset = YES;
}

- (BOOL) pocket_second_titleIsSet {
  return __pocket_second_title_isset;
}

- (void) unsetPocket_second_title {
  [__pocket_second_title release_stub];
  __pocket_second_title = nil;
  __pocket_second_title_isset = NO;
}

- (NSString *) cover_photo {
  return [[__cover_photo retain_stub] autorelease_stub];
}

- (void) setCover_photo: (NSString *) cover_photo {
  [cover_photo retain_stub];
  [__cover_photo release_stub];
  __cover_photo = cover_photo;
  __cover_photo_isset = YES;
}

- (BOOL) cover_photoIsSet {
  return __cover_photo_isset;
}

- (void) unsetCover_photo {
  [__cover_photo release_stub];
  __cover_photo = nil;
  __cover_photo_isset = NO;
}

- (NSString *) create_time {
  return [[__create_time retain_stub] autorelease_stub];
}

- (void) setCreate_time: (NSString *) create_time {
  [create_time retain_stub];
  [__create_time release_stub];
  __create_time = create_time;
  __create_time_isset = YES;
}

- (BOOL) create_timeIsSet {
  return __create_time_isset;
}

- (void) unsetCreate_time {
  [__create_time release_stub];
  __create_time = nil;
  __create_time_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (BOOL) is_recommend {
  return __is_recommend;
}

- (void) setIs_recommend: (BOOL) is_recommend {
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
}

- (BOOL) is_recommendIsSet {
  return __is_recommend_isset;
}

- (void) unsetIs_recommend {
  __is_recommend_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_second_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCover_photo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreate_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_recommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Pocket"];
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__pocket_title_isset) {
    if (__pocket_title != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pocket_title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_second_title_isset) {
    if (__pocket_second_title != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_second_title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pocket_second_title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cover_photo_isset) {
    if (__cover_photo != nil) {
      [outProtocol writeFieldBeginWithName: @"cover_photo" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __cover_photo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__create_time_isset) {
    if (__create_time != nil) {
      [outProtocol writeFieldBeginWithName: @"create_time" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __create_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  if (__is_recommend_isset) {
    [outProtocol writeFieldBeginWithName: @"is_recommend" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __is_recommend];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Pocket("];
  [ms appendString: @"pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",pocket_title:"];
  [ms appendFormat: @"\"%@\"", __pocket_title];
  [ms appendString: @",pocket_second_title:"];
  [ms appendFormat: @"\"%@\"", __pocket_second_title];
  [ms appendString: @",cover_photo:"];
  [ms appendFormat: @"\"%@\"", __cover_photo];
  [ms appendString: @",create_time:"];
  [ms appendFormat: @"\"%@\"", __create_time];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @",is_recommend:"];
  [ms appendFormat: @"%i", __is_recommend];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketListRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session host_domain: (NSString *) host_domain page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __host_domain = [host_domain retain_stub];
  __host_domain_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"host_domain"])
  {
    __host_domain = [[decoder decodeObjectForKey: @"host_domain"] retain_stub];
    __host_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__host_domain_isset)
  {
    [encoder encodeObject: __host_domain forKey: @"host_domain"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__host_domain release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (NSString *) host_domain {
  return [[__host_domain retain_stub] autorelease_stub];
}

- (void) setHost_domain: (NSString *) host_domain {
  [host_domain retain_stub];
  [__host_domain release_stub];
  __host_domain = host_domain;
  __host_domain_isset = YES;
}

- (BOOL) host_domainIsSet {
  return __host_domain_isset;
}

- (void) unsetHost_domain {
  [__host_domain release_stub];
  __host_domain = nil;
  __host_domain_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketListRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_domain_isset) {
    if (__host_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"host_domain" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __host_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketListRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",host_domain:"];
  [ms appendFormat: @"\"%@\"", __host_domain];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketListResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count pocket_list: (NSMutableArray *) pocket_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __pocket_list = [pocket_list retain_stub];
  __pocket_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_list"])
  {
    __pocket_list = [[decoder decodeObjectForKey: @"pocket_list"] retain_stub];
    __pocket_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__pocket_list_isset)
  {
    [encoder encodeObject: __pocket_list forKey: @"pocket_list"];
  }
}

- (void) dealloc
{
  [__pocket_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) pocket_list {
  return [[__pocket_list retain_stub] autorelease_stub];
}

- (void) setPocket_list: (NSMutableArray *) pocket_list {
  [pocket_list retain_stub];
  [__pocket_list release_stub];
  __pocket_list = pocket_list;
  __pocket_list_isset = YES;
}

- (BOOL) pocket_listIsSet {
  return __pocket_list_isset;
}

- (void) unsetPocket_list {
  [__pocket_list release_stub];
  __pocket_list = nil;
  __pocket_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            Pocket *_elem57 = [[Pocket alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setPocket_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketListResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__pocket_list_isset) {
    if (__pocket_list != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__pocket_list count]];
        int idx59;
        for (idx59 = 0; idx59 < [__pocket_list count]; idx59++)
        {
          [[__pocket_list objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketListResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",pocket_list:"];
  [ms appendFormat: @"%@", __pocket_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPocket_id: (int64_t) pocket_id pocket_cover_photo: (NSString *) pocket_cover_photo pocket_title: (NSString *) pocket_title pocket_second_title: (NSString *) pocket_second_title pocket_content: (NSString *) pocket_content create_time: (NSString *) create_time author_id: (int64_t) author_id author_name: (NSString *) author_name author_avatar: (NSString *) author_avatar author_domain: (NSString *) author_domain temperature: (int32_t) temperature is_self: (BOOL) is_self follow_state: (int32_t) follow_state is_like: (BOOL) is_like is_favorite: (BOOL) is_favorite is_recommend: (BOOL) is_recommend
{
  self = [super init];
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __pocket_cover_photo = [pocket_cover_photo retain_stub];
  __pocket_cover_photo_isset = YES;
  __pocket_title = [pocket_title retain_stub];
  __pocket_title_isset = YES;
  __pocket_second_title = [pocket_second_title retain_stub];
  __pocket_second_title_isset = YES;
  __pocket_content = [pocket_content retain_stub];
  __pocket_content_isset = YES;
  __create_time = [create_time retain_stub];
  __create_time_isset = YES;
  __author_id = author_id;
  __author_id_isset = YES;
  __author_name = [author_name retain_stub];
  __author_name_isset = YES;
  __author_avatar = [author_avatar retain_stub];
  __author_avatar_isset = YES;
  __author_domain = [author_domain retain_stub];
  __author_domain_isset = YES;
  __temperature = temperature;
  __temperature_isset = YES;
  __is_self = is_self;
  __is_self_isset = YES;
  __follow_state = follow_state;
  __follow_state_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  __is_favorite = is_favorite;
  __is_favorite_isset = YES;
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_cover_photo"])
  {
    __pocket_cover_photo = [[decoder decodeObjectForKey: @"pocket_cover_photo"] retain_stub];
    __pocket_cover_photo_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_title"])
  {
    __pocket_title = [[decoder decodeObjectForKey: @"pocket_title"] retain_stub];
    __pocket_title_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_second_title"])
  {
    __pocket_second_title = [[decoder decodeObjectForKey: @"pocket_second_title"] retain_stub];
    __pocket_second_title_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_content"])
  {
    __pocket_content = [[decoder decodeObjectForKey: @"pocket_content"] retain_stub];
    __pocket_content_isset = YES;
  }
  if ([decoder containsValueForKey: @"create_time"])
  {
    __create_time = [[decoder decodeObjectForKey: @"create_time"] retain_stub];
    __create_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_id"])
  {
    __author_id = [decoder decodeInt64ForKey: @"author_id"];
    __author_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_name"])
  {
    __author_name = [[decoder decodeObjectForKey: @"author_name"] retain_stub];
    __author_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_avatar"])
  {
    __author_avatar = [[decoder decodeObjectForKey: @"author_avatar"] retain_stub];
    __author_avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_domain"])
  {
    __author_domain = [[decoder decodeObjectForKey: @"author_domain"] retain_stub];
    __author_domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"temperature"])
  {
    __temperature = [decoder decodeInt32ForKey: @"temperature"];
    __temperature_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_self"])
  {
    __is_self = [decoder decodeBoolForKey: @"is_self"];
    __is_self_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_favorite"])
  {
    __is_favorite = [decoder decodeBoolForKey: @"is_favorite"];
    __is_favorite_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_recommend"])
  {
    __is_recommend = [decoder decodeBoolForKey: @"is_recommend"];
    __is_recommend_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__pocket_cover_photo_isset)
  {
    [encoder encodeObject: __pocket_cover_photo forKey: @"pocket_cover_photo"];
  }
  if (__pocket_title_isset)
  {
    [encoder encodeObject: __pocket_title forKey: @"pocket_title"];
  }
  if (__pocket_second_title_isset)
  {
    [encoder encodeObject: __pocket_second_title forKey: @"pocket_second_title"];
  }
  if (__pocket_content_isset)
  {
    [encoder encodeObject: __pocket_content forKey: @"pocket_content"];
  }
  if (__create_time_isset)
  {
    [encoder encodeObject: __create_time forKey: @"create_time"];
  }
  if (__author_id_isset)
  {
    [encoder encodeInt64: __author_id forKey: @"author_id"];
  }
  if (__author_name_isset)
  {
    [encoder encodeObject: __author_name forKey: @"author_name"];
  }
  if (__author_avatar_isset)
  {
    [encoder encodeObject: __author_avatar forKey: @"author_avatar"];
  }
  if (__author_domain_isset)
  {
    [encoder encodeObject: __author_domain forKey: @"author_domain"];
  }
  if (__temperature_isset)
  {
    [encoder encodeInt32: __temperature forKey: @"temperature"];
  }
  if (__is_self_isset)
  {
    [encoder encodeBool: __is_self forKey: @"is_self"];
  }
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
  if (__is_favorite_isset)
  {
    [encoder encodeBool: __is_favorite forKey: @"is_favorite"];
  }
  if (__is_recommend_isset)
  {
    [encoder encodeBool: __is_recommend forKey: @"is_recommend"];
  }
}

- (void) dealloc
{
  [__pocket_cover_photo release_stub];
  [__pocket_title release_stub];
  [__pocket_second_title release_stub];
  [__pocket_content release_stub];
  [__create_time release_stub];
  [__author_name release_stub];
  [__author_avatar release_stub];
  [__author_domain release_stub];
  [super dealloc_stub];
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (NSString *) pocket_cover_photo {
  return [[__pocket_cover_photo retain_stub] autorelease_stub];
}

- (void) setPocket_cover_photo: (NSString *) pocket_cover_photo {
  [pocket_cover_photo retain_stub];
  [__pocket_cover_photo release_stub];
  __pocket_cover_photo = pocket_cover_photo;
  __pocket_cover_photo_isset = YES;
}

- (BOOL) pocket_cover_photoIsSet {
  return __pocket_cover_photo_isset;
}

- (void) unsetPocket_cover_photo {
  [__pocket_cover_photo release_stub];
  __pocket_cover_photo = nil;
  __pocket_cover_photo_isset = NO;
}

- (NSString *) pocket_title {
  return [[__pocket_title retain_stub] autorelease_stub];
}

- (void) setPocket_title: (NSString *) pocket_title {
  [pocket_title retain_stub];
  [__pocket_title release_stub];
  __pocket_title = pocket_title;
  __pocket_title_isset = YES;
}

- (BOOL) pocket_titleIsSet {
  return __pocket_title_isset;
}

- (void) unsetPocket_title {
  [__pocket_title release_stub];
  __pocket_title = nil;
  __pocket_title_isset = NO;
}

- (NSString *) pocket_second_title {
  return [[__pocket_second_title retain_stub] autorelease_stub];
}

- (void) setPocket_second_title: (NSString *) pocket_second_title {
  [pocket_second_title retain_stub];
  [__pocket_second_title release_stub];
  __pocket_second_title = pocket_second_title;
  __pocket_second_title_isset = YES;
}

- (BOOL) pocket_second_titleIsSet {
  return __pocket_second_title_isset;
}

- (void) unsetPocket_second_title {
  [__pocket_second_title release_stub];
  __pocket_second_title = nil;
  __pocket_second_title_isset = NO;
}

- (NSString *) pocket_content {
  return [[__pocket_content retain_stub] autorelease_stub];
}

- (void) setPocket_content: (NSString *) pocket_content {
  [pocket_content retain_stub];
  [__pocket_content release_stub];
  __pocket_content = pocket_content;
  __pocket_content_isset = YES;
}

- (BOOL) pocket_contentIsSet {
  return __pocket_content_isset;
}

- (void) unsetPocket_content {
  [__pocket_content release_stub];
  __pocket_content = nil;
  __pocket_content_isset = NO;
}

- (NSString *) create_time {
  return [[__create_time retain_stub] autorelease_stub];
}

- (void) setCreate_time: (NSString *) create_time {
  [create_time retain_stub];
  [__create_time release_stub];
  __create_time = create_time;
  __create_time_isset = YES;
}

- (BOOL) create_timeIsSet {
  return __create_time_isset;
}

- (void) unsetCreate_time {
  [__create_time release_stub];
  __create_time = nil;
  __create_time_isset = NO;
}

- (int64_t) author_id {
  return __author_id;
}

- (void) setAuthor_id: (int64_t) author_id {
  __author_id = author_id;
  __author_id_isset = YES;
}

- (BOOL) author_idIsSet {
  return __author_id_isset;
}

- (void) unsetAuthor_id {
  __author_id_isset = NO;
}

- (NSString *) author_name {
  return [[__author_name retain_stub] autorelease_stub];
}

- (void) setAuthor_name: (NSString *) author_name {
  [author_name retain_stub];
  [__author_name release_stub];
  __author_name = author_name;
  __author_name_isset = YES;
}

- (BOOL) author_nameIsSet {
  return __author_name_isset;
}

- (void) unsetAuthor_name {
  [__author_name release_stub];
  __author_name = nil;
  __author_name_isset = NO;
}

- (NSString *) author_avatar {
  return [[__author_avatar retain_stub] autorelease_stub];
}

- (void) setAuthor_avatar: (NSString *) author_avatar {
  [author_avatar retain_stub];
  [__author_avatar release_stub];
  __author_avatar = author_avatar;
  __author_avatar_isset = YES;
}

- (BOOL) author_avatarIsSet {
  return __author_avatar_isset;
}

- (void) unsetAuthor_avatar {
  [__author_avatar release_stub];
  __author_avatar = nil;
  __author_avatar_isset = NO;
}

- (NSString *) author_domain {
  return [[__author_domain retain_stub] autorelease_stub];
}

- (void) setAuthor_domain: (NSString *) author_domain {
  [author_domain retain_stub];
  [__author_domain release_stub];
  __author_domain = author_domain;
  __author_domain_isset = YES;
}

- (BOOL) author_domainIsSet {
  return __author_domain_isset;
}

- (void) unsetAuthor_domain {
  [__author_domain release_stub];
  __author_domain = nil;
  __author_domain_isset = NO;
}

- (int32_t) temperature {
  return __temperature;
}

- (void) setTemperature: (int32_t) temperature {
  __temperature = temperature;
  __temperature_isset = YES;
}

- (BOOL) temperatureIsSet {
  return __temperature_isset;
}

- (void) unsetTemperature {
  __temperature_isset = NO;
}

- (BOOL) is_self {
  return __is_self;
}

- (void) setIs_self: (BOOL) is_self {
  __is_self = is_self;
  __is_self_isset = YES;
}

- (BOOL) is_selfIsSet {
  return __is_self_isset;
}

- (void) unsetIs_self {
  __is_self_isset = NO;
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (BOOL) is_favorite {
  return __is_favorite;
}

- (void) setIs_favorite: (BOOL) is_favorite {
  __is_favorite = is_favorite;
  __is_favorite_isset = YES;
}

- (BOOL) is_favoriteIsSet {
  return __is_favorite_isset;
}

- (void) unsetIs_favorite {
  __is_favorite_isset = NO;
}

- (BOOL) is_recommend {
  return __is_recommend;
}

- (void) setIs_recommend: (BOOL) is_recommend {
  __is_recommend = is_recommend;
  __is_recommend_isset = YES;
}

- (BOOL) is_recommendIsSet {
  return __is_recommend_isset;
}

- (void) unsetIs_recommend {
  __is_recommend_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_cover_photo: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_second_title: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPocket_content: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCreate_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAuthor_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_avatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTemperature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_self: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_favorite: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_recommend: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketResponse"];
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__pocket_cover_photo_isset) {
    if (__pocket_cover_photo != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_cover_photo" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pocket_cover_photo];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_title_isset) {
    if (__pocket_title != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pocket_title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_second_title_isset) {
    if (__pocket_second_title != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_second_title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __pocket_second_title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_content_isset) {
    if (__pocket_content != nil) {
      [outProtocol writeFieldBeginWithName: @"pocket_content" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __pocket_content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__create_time_isset) {
    if (__create_time != nil) {
      [outProtocol writeFieldBeginWithName: @"create_time" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __create_time];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_id_isset) {
    [outProtocol writeFieldBeginWithName: @"author_id" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __author_id];
    [outProtocol writeFieldEnd];
  }
  if (__author_name_isset) {
    if (__author_name != nil) {
      [outProtocol writeFieldBeginWithName: @"author_name" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __author_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_avatar_isset) {
    if (__author_avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"author_avatar" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __author_avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_domain_isset) {
    if (__author_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"author_domain" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __author_domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__temperature_isset) {
    [outProtocol writeFieldBeginWithName: @"temperature" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __temperature];
    [outProtocol writeFieldEnd];
  }
  if (__is_self_isset) {
    [outProtocol writeFieldBeginWithName: @"is_self" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __is_self];
    [outProtocol writeFieldEnd];
  }
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 14];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  if (__is_favorite_isset) {
    [outProtocol writeFieldBeginWithName: @"is_favorite" type: TType_BOOL fieldID: 15];
    [outProtocol writeBool: __is_favorite];
    [outProtocol writeFieldEnd];
  }
  if (__is_recommend_isset) {
    [outProtocol writeFieldBeginWithName: @"is_recommend" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __is_recommend];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketResponse("];
  [ms appendString: @"pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",pocket_cover_photo:"];
  [ms appendFormat: @"\"%@\"", __pocket_cover_photo];
  [ms appendString: @",pocket_title:"];
  [ms appendFormat: @"\"%@\"", __pocket_title];
  [ms appendString: @",pocket_second_title:"];
  [ms appendFormat: @"\"%@\"", __pocket_second_title];
  [ms appendString: @",pocket_content:"];
  [ms appendFormat: @"\"%@\"", __pocket_content];
  [ms appendString: @",create_time:"];
  [ms appendFormat: @"\"%@\"", __create_time];
  [ms appendString: @",author_id:"];
  [ms appendFormat: @"%qi", __author_id];
  [ms appendString: @",author_name:"];
  [ms appendFormat: @"\"%@\"", __author_name];
  [ms appendString: @",author_avatar:"];
  [ms appendFormat: @"\"%@\"", __author_avatar];
  [ms appendString: @",author_domain:"];
  [ms appendFormat: @"\"%@\"", __author_domain];
  [ms appendString: @",temperature:"];
  [ms appendFormat: @"%i", __temperature];
  [ms appendString: @",is_self:"];
  [ms appendFormat: @"%i", __is_self];
  [ms appendString: @",follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @",is_favorite:"];
  [ms appendFormat: @"%i", __is_favorite];
  [ms appendString: @",is_recommend:"];
  [ms appendFormat: @"%i", __is_recommend];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id page_no: (int32_t) page_no page_size: (int32_t) page_size
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetPocketCommentResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size comment_list: (NSMutableArray *) comment_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __comment_list = [comment_list retain_stub];
  __comment_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_list"])
  {
    __comment_list = [[decoder decodeObjectForKey: @"comment_list"] retain_stub];
    __comment_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__comment_list_isset)
  {
    [encoder encodeObject: __comment_list forKey: @"comment_list"];
  }
}

- (void) dealloc
{
  [__comment_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (NSMutableArray *) comment_list {
  return [[__comment_list retain_stub] autorelease_stub];
}

- (void) setComment_list: (NSMutableArray *) comment_list {
  [comment_list retain_stub];
  [__comment_list release_stub];
  __comment_list = comment_list;
  __comment_list_isset = YES;
}

- (BOOL) comment_listIsSet {
  return __comment_list_isset;
}

- (void) unsetComment_list {
  [__comment_list release_stub];
  __comment_list = nil;
  __comment_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            Comment *_elem62 = [[Comment alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setComment_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPocketCommentResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__comment_list_isset) {
    if (__comment_list != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_list" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__comment_list count]];
        int idx64;
        for (idx64 = 0; idx64 < [__comment_list count]; idx64++)
        {
          [[__comment_list objectAtIndex: idx64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPocketCommentResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",comment_list:"];
  [ms appendFormat: @"%@", __comment_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPocketCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session reply_user_id: (int64_t) reply_user_id pocket_id: (int64_t) pocket_id comment_text: (NSString *) comment_text
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __comment_text = [comment_text retain_stub];
  __comment_text_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"reply_user_id"])
  {
    __reply_user_id = [decoder decodeInt64ForKey: @"reply_user_id"];
    __reply_user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_text"])
  {
    __comment_text = [[decoder decodeObjectForKey: @"comment_text"] retain_stub];
    __comment_text_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__reply_user_id_isset)
  {
    [encoder encodeInt64: __reply_user_id forKey: @"reply_user_id"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__comment_text_isset)
  {
    [encoder encodeObject: __comment_text forKey: @"comment_text"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__comment_text release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) reply_user_id {
  return __reply_user_id;
}

- (void) setReply_user_id: (int64_t) reply_user_id {
  __reply_user_id = reply_user_id;
  __reply_user_id_isset = YES;
}

- (BOOL) reply_user_idIsSet {
  return __reply_user_id_isset;
}

- (void) unsetReply_user_id {
  __reply_user_id_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (NSString *) comment_text {
  return [[__comment_text retain_stub] autorelease_stub];
}

- (void) setComment_text: (NSString *) comment_text {
  [comment_text retain_stub];
  [__comment_text release_stub];
  __comment_text = comment_text;
  __comment_text_isset = YES;
}

- (BOOL) comment_textIsSet {
  return __comment_text_isset;
}

- (void) unsetComment_text {
  [__comment_text release_stub];
  __comment_text = nil;
  __comment_text_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReply_user_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComment_text: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPocketCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reply_user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"reply_user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __reply_user_id];
    [outProtocol writeFieldEnd];
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_text_isset) {
    if (__comment_text != nil) {
      [outProtocol writeFieldBeginWithName: @"comment_text" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __comment_text];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPocketCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",reply_user_id:"];
  [ms appendFormat: @"%qi", __reply_user_id];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",comment_text:"];
  [ms appendFormat: @"\"%@\"", __comment_text];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AddPocketCommentResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithComment: (Comment *) comment
{
  self = [super init];
  __comment = [comment retain_stub];
  __comment_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"comment"])
  {
    __comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
    __comment_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__comment_isset)
  {
    [encoder encodeObject: __comment forKey: @"comment"];
  }
}

- (void) dealloc
{
  [__comment release_stub];
  [super dealloc_stub];
}

- (Comment *) comment {
  return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (Comment *) comment {
  [comment retain_stub];
  [__comment release_stub];
  __comment = comment;
  __comment_isset = YES;
}

- (BOOL) commentIsSet {
  return __comment_isset;
}

- (void) unsetComment {
  [__comment release_stub];
  __comment = nil;
  __comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Comment *fieldValue = [[Comment alloc] init];
          [fieldValue read: inProtocol];
          [self setComment: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AddPocketCommentResponse"];
  if (__comment_isset) {
    if (__comment != nil) {
      [outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
      [__comment write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AddPocketCommentResponse("];
  [ms appendString: @"comment:"];
  [ms appendFormat: @"%@", __comment];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DeletePocketCommentRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session pocket_id: (int64_t) pocket_id comment_id: (int64_t) comment_id
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
  __comment_id = comment_id;
  __comment_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"pocket_id"])
  {
    __pocket_id = [decoder decodeInt64ForKey: @"pocket_id"];
    __pocket_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"comment_id"])
  {
    __comment_id = [decoder decodeInt64ForKey: @"comment_id"];
    __comment_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__pocket_id_isset)
  {
    [encoder encodeInt64: __pocket_id forKey: @"pocket_id"];
  }
  if (__comment_id_isset)
  {
    [encoder encodeInt64: __comment_id forKey: @"comment_id"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int64_t) pocket_id {
  return __pocket_id;
}

- (void) setPocket_id: (int64_t) pocket_id {
  __pocket_id = pocket_id;
  __pocket_id_isset = YES;
}

- (BOOL) pocket_idIsSet {
  return __pocket_id_isset;
}

- (void) unsetPocket_id {
  __pocket_id_isset = NO;
}

- (int64_t) comment_id {
  return __comment_id;
}

- (void) setComment_id: (int64_t) comment_id {
  __comment_id = comment_id;
  __comment_id_isset = YES;
}

- (BOOL) comment_idIsSet {
  return __comment_id_isset;
}

- (void) unsetComment_id {
  __comment_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPocket_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setComment_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeletePocketCommentRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pocket_id_isset) {
    [outProtocol writeFieldBeginWithName: @"pocket_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __pocket_id];
    [outProtocol writeFieldEnd];
  }
  if (__comment_id_isset) {
    [outProtocol writeFieldBeginWithName: @"comment_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __comment_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeletePocketCommentRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",pocket_id:"];
  [ms appendFormat: @"%qi", __pocket_id];
  [ms appendString: @",comment_id:"];
  [ms appendFormat: @"%qi", __comment_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation contentConstants
+ (void) initialize {
}
@end

