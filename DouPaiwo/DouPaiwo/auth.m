/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "auth.h"

@implementation EmailLoginRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithEmail: (NSString *) email password: (NSString *) password
{
  self = [super init];
  __email = [email retain_stub];
  __email_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__email release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmailLoginRequest"];
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EmailLoginRequest("];
  [ms appendString: @"email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EmailLoginResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_id: (int64_t) user_id email_state: (int32_t) email_state gift: (int32_t) gift session: (NSString *) session
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __email_state = email_state;
  __email_state_isset = YES;
  __gift = gift;
  __gift_isset = YES;
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"email_state"])
  {
    __email_state = [decoder decodeInt32ForKey: @"email_state"];
    __email_state_isset = YES;
  }
  if ([decoder containsValueForKey: @"gift"])
  {
    __gift = [decoder decodeInt32ForKey: @"gift"];
    __gift_isset = YES;
  }
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__email_state_isset)
  {
    [encoder encodeInt32: __email_state forKey: @"email_state"];
  }
  if (__gift_isset)
  {
    [encoder encodeInt32: __gift forKey: @"gift"];
  }
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (int32_t) email_state {
  return __email_state;
}

- (void) setEmail_state: (int32_t) email_state {
  __email_state = email_state;
  __email_state_isset = YES;
}

- (BOOL) email_stateIsSet {
  return __email_state_isset;
}

- (void) unsetEmail_state {
  __email_state_isset = NO;
}

- (int32_t) gift {
  return __gift;
}

- (void) setGift: (int32_t) gift {
  __gift = gift;
  __gift_isset = YES;
}

- (BOOL) giftIsSet {
  return __gift_isset;
}

- (void) unsetGift {
  __gift_isset = NO;
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setEmail_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGift: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EmailLoginResponse"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__email_state_isset) {
    [outProtocol writeFieldBeginWithName: @"email_state" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __email_state];
    [outProtocol writeFieldEnd];
  }
  if (__gift_isset) {
    [outProtocol writeFieldBeginWithName: @"gift" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __gift];
    [outProtocol writeFieldEnd];
  }
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EmailLoginResponse("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",email_state:"];
  [ms appendFormat: @"%i", __email_state];
  [ms appendString: @",gift:"];
  [ms appendFormat: @"%i", __gift];
  [ms appendString: @",session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialLoginRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOpen_id: (NSString *) open_id
{
  self = [super init];
  __open_id = [open_id retain_stub];
  __open_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"open_id"])
  {
    __open_id = [[decoder decodeObjectForKey: @"open_id"] retain_stub];
    __open_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__open_id_isset)
  {
    [encoder encodeObject: __open_id forKey: @"open_id"];
  }
}

- (void) dealloc
{
  [__open_id release_stub];
  [super dealloc_stub];
}

- (NSString *) open_id {
  return [[__open_id retain_stub] autorelease_stub];
}

- (void) setOpen_id: (NSString *) open_id {
  [open_id retain_stub];
  [__open_id release_stub];
  __open_id = open_id;
  __open_id_isset = YES;
}

- (BOOL) open_idIsSet {
  return __open_id_isset;
}

- (void) unsetOpen_id {
  [__open_id release_stub];
  __open_id = nil;
  __open_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOpen_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialLoginRequest"];
  if (__open_id_isset) {
    if (__open_id != nil) {
      [outProtocol writeFieldBeginWithName: @"open_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __open_id];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialLoginRequest("];
  [ms appendString: @"open_id:"];
  [ms appendFormat: @"\"%@\"", __open_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SocialLoginResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_id: (int64_t) user_id gift: (int32_t) gift session: (NSString *) session is_first: (BOOL) is_first
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __gift = gift;
  __gift_isset = YES;
  __session = [session retain_stub];
  __session_isset = YES;
  __is_first = is_first;
  __is_first_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"gift"])
  {
    __gift = [decoder decodeInt32ForKey: @"gift"];
    __gift_isset = YES;
  }
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_first"])
  {
    __is_first = [decoder decodeBoolForKey: @"is_first"];
    __is_first_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__gift_isset)
  {
    [encoder encodeInt32: __gift forKey: @"gift"];
  }
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__is_first_isset)
  {
    [encoder encodeBool: __is_first forKey: @"is_first"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (int32_t) gift {
  return __gift;
}

- (void) setGift: (int32_t) gift {
  __gift = gift;
  __gift_isset = YES;
}

- (BOOL) giftIsSet {
  return __gift_isset;
}

- (void) unsetGift {
  __gift_isset = NO;
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (BOOL) is_first {
  return __is_first;
}

- (void) setIs_first: (BOOL) is_first {
  __is_first = is_first;
  __is_first_isset = YES;
}

- (BOOL) is_firstIsSet {
  return __is_first_isset;
}

- (void) unsetIs_first {
  __is_first_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGift: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_first: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SocialLoginResponse"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__gift_isset) {
    [outProtocol writeFieldBeginWithName: @"gift" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __gift];
    [outProtocol writeFieldEnd];
  }
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_first_isset) {
    [outProtocol writeFieldBeginWithName: @"is_first" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __is_first];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SocialLoginResponse("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",gift:"];
  [ms appendFormat: @"%i", __gift];
  [ms appendString: @",session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",is_first:"];
  [ms appendFormat: @"%i", __is_first];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authConstants
+ (void) initialize {
}
@end

