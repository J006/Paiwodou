/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "search.h"

@implementation SearchPhoto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPhoto_id: (int64_t) photo_id photo_path: (NSString *) photo_path is_like: (BOOL) is_like author_name: (NSString *) author_name author_domain: (NSString *) author_domain
{
  self = [super init];
  __photo_id = photo_id;
  __photo_id_isset = YES;
  __photo_path = [photo_path retain_stub];
  __photo_path_isset = YES;
  __is_like = is_like;
  __is_like_isset = YES;
  __author_name = [author_name retain_stub];
  __author_name_isset = YES;
  __author_domain = [author_domain retain_stub];
  __author_domain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"photo_id"])
  {
    __photo_id = [decoder decodeInt64ForKey: @"photo_id"];
    __photo_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_path"])
  {
    __photo_path = [[decoder decodeObjectForKey: @"photo_path"] retain_stub];
    __photo_path_isset = YES;
  }
  if ([decoder containsValueForKey: @"is_like"])
  {
    __is_like = [decoder decodeBoolForKey: @"is_like"];
    __is_like_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_name"])
  {
    __author_name = [[decoder decodeObjectForKey: @"author_name"] retain_stub];
    __author_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"author_domain"])
  {
    __author_domain = [[decoder decodeObjectForKey: @"author_domain"] retain_stub];
    __author_domain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__photo_id_isset)
  {
    [encoder encodeInt64: __photo_id forKey: @"photo_id"];
  }
  if (__photo_path_isset)
  {
    [encoder encodeObject: __photo_path forKey: @"photo_path"];
  }
  if (__is_like_isset)
  {
    [encoder encodeBool: __is_like forKey: @"is_like"];
  }
  if (__author_name_isset)
  {
    [encoder encodeObject: __author_name forKey: @"author_name"];
  }
  if (__author_domain_isset)
  {
    [encoder encodeObject: __author_domain forKey: @"author_domain"];
  }
}

- (void) dealloc
{
  [__photo_path release_stub];
  [__author_name release_stub];
  [__author_domain release_stub];
  [super dealloc_stub];
}

- (int64_t) photo_id {
  return __photo_id;
}

- (void) setPhoto_id: (int64_t) photo_id {
  __photo_id = photo_id;
  __photo_id_isset = YES;
}

- (BOOL) photo_idIsSet {
  return __photo_id_isset;
}

- (void) unsetPhoto_id {
  __photo_id_isset = NO;
}

- (NSString *) photo_path {
  return [[__photo_path retain_stub] autorelease_stub];
}

- (void) setPhoto_path: (NSString *) photo_path {
  [photo_path retain_stub];
  [__photo_path release_stub];
  __photo_path = photo_path;
  __photo_path_isset = YES;
}

- (BOOL) photo_pathIsSet {
  return __photo_path_isset;
}

- (void) unsetPhoto_path {
  [__photo_path release_stub];
  __photo_path = nil;
  __photo_path_isset = NO;
}

- (BOOL) is_like {
  return __is_like;
}

- (void) setIs_like: (BOOL) is_like {
  __is_like = is_like;
  __is_like_isset = YES;
}

- (BOOL) is_likeIsSet {
  return __is_like_isset;
}

- (void) unsetIs_like {
  __is_like_isset = NO;
}

- (NSString *) author_name {
  return [[__author_name retain_stub] autorelease_stub];
}

- (void) setAuthor_name: (NSString *) author_name {
  [author_name retain_stub];
  [__author_name release_stub];
  __author_name = author_name;
  __author_name_isset = YES;
}

- (BOOL) author_nameIsSet {
  return __author_name_isset;
}

- (void) unsetAuthor_name {
  [__author_name release_stub];
  __author_name = nil;
  __author_name_isset = NO;
}

- (NSString *) author_domain {
  return [[__author_domain retain_stub] autorelease_stub];
}

- (void) setAuthor_domain: (NSString *) author_domain {
  [author_domain retain_stub];
  [__author_domain release_stub];
  __author_domain = author_domain;
  __author_domain_isset = YES;
}

- (BOOL) author_domainIsSet {
  return __author_domain_isset;
}

- (void) unsetAuthor_domain {
  [__author_domain release_stub];
  __author_domain = nil;
  __author_domain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPhoto_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhoto_path: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIs_like: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor_domain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchPhoto"];
  if (__photo_id_isset) {
    [outProtocol writeFieldBeginWithName: @"photo_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __photo_id];
    [outProtocol writeFieldEnd];
  }
  if (__photo_path_isset) {
    if (__photo_path != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __photo_path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__is_like_isset) {
    [outProtocol writeFieldBeginWithName: @"is_like" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __is_like];
    [outProtocol writeFieldEnd];
  }
  if (__author_name_isset) {
    if (__author_name != nil) {
      [outProtocol writeFieldBeginWithName: @"author_name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __author_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__author_domain_isset) {
    if (__author_domain != nil) {
      [outProtocol writeFieldBeginWithName: @"author_domain" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __author_domain];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchPhoto("];
  [ms appendString: @"photo_id:"];
  [ms appendFormat: @"%qi", __photo_id];
  [ms appendString: @",photo_path:"];
  [ms appendFormat: @"\"%@\"", __photo_path];
  [ms appendString: @",is_like:"];
  [ms appendFormat: @"%i", __is_like];
  [ms appendString: @",author_name:"];
  [ms appendFormat: @"\"%@\"", __author_name];
  [ms appendString: @",author_domain:"];
  [ms appendFormat: @"\"%@\"", __author_domain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchPhotoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session page_no: (int32_t) page_no page_size: (int32_t) page_size tags: (NSMutableArray *) tags
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__tags release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchPhotoRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int idx4;
        for (idx4 = 0; idx4 < [__tags count]; idx4++)
        {
          [outProtocol writeString: [__tags objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchPhotoRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchPhotoResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count photo_list: (NSMutableArray *) photo_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __photo_list = [photo_list retain_stub];
  __photo_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"photo_list"])
  {
    __photo_list = [[decoder decodeObjectForKey: @"photo_list"] retain_stub];
    __photo_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__photo_list_isset)
  {
    [encoder encodeObject: __photo_list forKey: @"photo_list"];
  }
}

- (void) dealloc
{
  [__photo_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) photo_list {
  return [[__photo_list retain_stub] autorelease_stub];
}

- (void) setPhoto_list: (NSMutableArray *) photo_list {
  [photo_list retain_stub];
  [__photo_list release_stub];
  __photo_list = photo_list;
  __photo_list_isset = YES;
}

- (BOOL) photo_listIsSet {
  return __photo_list_isset;
}

- (void) unsetPhoto_list {
  [__photo_list release_stub];
  __photo_list = nil;
  __photo_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            SearchPhoto *_elem7 = [[SearchPhoto alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setPhoto_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchPhotoResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__photo_list_isset) {
    if (__photo_list != nil) {
      [outProtocol writeFieldBeginWithName: @"photo_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__photo_list count]];
        int idx9;
        for (idx9 = 0; idx9 < [__photo_list count]; idx9++)
        {
          [[__photo_list objectAtIndex: idx9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchPhotoResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",photo_list:"];
  [ms appendFormat: @"%@", __photo_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUser_id: (int64_t) user_id user_name: (NSString *) user_name user_desc: (NSString *) user_desc avatar: (NSString *) avatar domain: (NSString *) domain gender: (int32_t) gender address: (NSString *) address follow_state: (int32_t) follow_state
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __user_name = [user_name retain_stub];
  __user_name_isset = YES;
  __user_desc = [user_desc retain_stub];
  __user_desc_isset = YES;
  __avatar = [avatar retain_stub];
  __avatar_isset = YES;
  __domain = [domain retain_stub];
  __domain_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __follow_state = follow_state;
  __follow_state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_name"])
  {
    __user_name = [[decoder decodeObjectForKey: @"user_name"] retain_stub];
    __user_name_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_desc"])
  {
    __user_desc = [[decoder decodeObjectForKey: @"user_desc"] retain_stub];
    __user_desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain_stub];
    __avatar_isset = YES;
  }
  if ([decoder containsValueForKey: @"domain"])
  {
    __domain = [[decoder decodeObjectForKey: @"domain"] retain_stub];
    __domain_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeInt32ForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow_state"])
  {
    __follow_state = [decoder decodeInt32ForKey: @"follow_state"];
    __follow_state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__user_name_isset)
  {
    [encoder encodeObject: __user_name forKey: @"user_name"];
  }
  if (__user_desc_isset)
  {
    [encoder encodeObject: __user_desc forKey: @"user_desc"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
  if (__domain_isset)
  {
    [encoder encodeObject: __domain forKey: @"domain"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt32: __gender forKey: @"gender"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__follow_state_isset)
  {
    [encoder encodeInt32: __follow_state forKey: @"follow_state"];
  }
}

- (void) dealloc
{
  [__user_name release_stub];
  [__user_desc release_stub];
  [__avatar release_stub];
  [__domain release_stub];
  [__address release_stub];
  [super dealloc_stub];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) user_name {
  return [[__user_name retain_stub] autorelease_stub];
}

- (void) setUser_name: (NSString *) user_name {
  [user_name retain_stub];
  [__user_name release_stub];
  __user_name = user_name;
  __user_name_isset = YES;
}

- (BOOL) user_nameIsSet {
  return __user_name_isset;
}

- (void) unsetUser_name {
  [__user_name release_stub];
  __user_name = nil;
  __user_name_isset = NO;
}

- (NSString *) user_desc {
  return [[__user_desc retain_stub] autorelease_stub];
}

- (void) setUser_desc: (NSString *) user_desc {
  [user_desc retain_stub];
  [__user_desc release_stub];
  __user_desc = user_desc;
  __user_desc_isset = YES;
}

- (BOOL) user_descIsSet {
  return __user_desc_isset;
}

- (void) unsetUser_desc {
  [__user_desc release_stub];
  __user_desc = nil;
  __user_desc_isset = NO;
}

- (NSString *) avatar {
  return [[__avatar retain_stub] autorelease_stub];
}

- (void) setAvatar: (NSString *) avatar {
  [avatar retain_stub];
  [__avatar release_stub];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release_stub];
  __avatar = nil;
  __avatar_isset = NO;
}

- (NSString *) domain {
  return [[__domain retain_stub] autorelease_stub];
}

- (void) setDomain: (NSString *) domain {
  [domain retain_stub];
  [__domain release_stub];
  __domain = domain;
  __domain_isset = YES;
}

- (BOOL) domainIsSet {
  return __domain_isset;
}

- (void) unsetDomain {
  [__domain release_stub];
  __domain = nil;
  __domain_isset = NO;
}

- (int32_t) gender {
  return __gender;
}

- (void) setGender: (int32_t) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (int32_t) follow_state {
  return __follow_state;
}

- (void) setFollow_state: (int32_t) follow_state {
  __follow_state = follow_state;
  __follow_state_isset = YES;
}

- (BOOL) follow_stateIsSet {
  return __follow_state_isset;
}

- (void) unsetFollow_state {
  __follow_state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_name: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUser_desc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDomain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setFollow_state: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchUser"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_name_isset) {
    if (__user_name != nil) {
      [outProtocol writeFieldBeginWithName: @"user_name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __user_name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_desc_isset) {
    if (__user_desc != nil) {
      [outProtocol writeFieldBeginWithName: @"user_desc" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __user_desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  if (__domain_isset) {
    if (__domain != nil) {
      [outProtocol writeFieldBeginWithName: @"domain" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __domain];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__follow_state_isset) {
    [outProtocol writeFieldBeginWithName: @"follow_state" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __follow_state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchUser("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",user_name:"];
  [ms appendFormat: @"\"%@\"", __user_name];
  [ms appendString: @",user_desc:"];
  [ms appendFormat: @"\"%@\"", __user_desc];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @",domain:"];
  [ms appendFormat: @"\"%@\"", __domain];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",follow_state:"];
  [ms appendFormat: @"%i", __follow_state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchUserRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session page_no: (int32_t) page_no page_size: (int32_t) page_size tags: (NSMutableArray *) tags
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [__tags release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchUserRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int idx14;
        for (idx14 = 0; idx14 < [__tags count]; idx14++)
        {
          [outProtocol writeString: [__tags objectAtIndex: idx14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchUserRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @",page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchUserResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPage_no: (int32_t) page_no page_size: (int32_t) page_size count: (int32_t) count user_list: (NSMutableArray *) user_list
{
  self = [super init];
  __page_no = page_no;
  __page_no_isset = YES;
  __page_size = page_size;
  __page_size_isset = YES;
  __count = count;
  __count_isset = YES;
  __user_list = [user_list retain_stub];
  __user_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"page_no"])
  {
    __page_no = [decoder decodeInt32ForKey: @"page_no"];
    __page_no_isset = YES;
  }
  if ([decoder containsValueForKey: @"page_size"])
  {
    __page_size = [decoder decodeInt32ForKey: @"page_size"];
    __page_size_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_list"])
  {
    __user_list = [[decoder decodeObjectForKey: @"user_list"] retain_stub];
    __user_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__page_no_isset)
  {
    [encoder encodeInt32: __page_no forKey: @"page_no"];
  }
  if (__page_size_isset)
  {
    [encoder encodeInt32: __page_size forKey: @"page_size"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__user_list_isset)
  {
    [encoder encodeObject: __user_list forKey: @"user_list"];
  }
}

- (void) dealloc
{
  [__user_list release_stub];
  [super dealloc_stub];
}

- (int32_t) page_no {
  return __page_no;
}

- (void) setPage_no: (int32_t) page_no {
  __page_no = page_no;
  __page_no_isset = YES;
}

- (BOOL) page_noIsSet {
  return __page_no_isset;
}

- (void) unsetPage_no {
  __page_no_isset = NO;
}

- (int32_t) page_size {
  return __page_size;
}

- (void) setPage_size: (int32_t) page_size {
  __page_size = page_size;
  __page_size_isset = YES;
}

- (BOOL) page_sizeIsSet {
  return __page_size_isset;
}

- (void) unsetPage_size {
  __page_size_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (NSMutableArray *) user_list {
  return [[__user_list retain_stub] autorelease_stub];
}

- (void) setUser_list: (NSMutableArray *) user_list {
  [user_list retain_stub];
  [__user_list release_stub];
  __user_list = user_list;
  __user_list_isset = YES;
}

- (BOOL) user_listIsSet {
  return __user_list_isset;
}

- (void) unsetUser_list {
  [__user_list release_stub];
  __user_list = nil;
  __user_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_no: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPage_size: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            SearchUser *_elem17 = [[SearchUser alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release_stub];
          }
          [inProtocol readListEnd];
          [self setUser_list: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchUserResponse"];
  if (__page_no_isset) {
    [outProtocol writeFieldBeginWithName: @"page_no" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __page_no];
    [outProtocol writeFieldEnd];
  }
  if (__page_size_isset) {
    [outProtocol writeFieldBeginWithName: @"page_size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __page_size];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__user_list_isset) {
    if (__user_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__user_list count]];
        int idx19;
        for (idx19 = 0; idx19 < [__user_list count]; idx19++)
        {
          [[__user_list objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchUserResponse("];
  [ms appendString: @"page_no:"];
  [ms appendFormat: @"%i", __page_no];
  [ms appendString: @",page_size:"];
  [ms appendFormat: @"%i", __page_size];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",user_list:"];
  [ms appendFormat: @"%@", __user_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HotSearchRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSession: (NSString *) session
{
  self = [super init];
  __session = [session retain_stub];
  __session_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"session"])
  {
    __session = [[decoder decodeObjectForKey: @"session"] retain_stub];
    __session_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__session_isset)
  {
    [encoder encodeObject: __session forKey: @"session"];
  }
}

- (void) dealloc
{
  [__session release_stub];
  [super dealloc_stub];
}

- (NSString *) session {
  return [[__session retain_stub] autorelease_stub];
}

- (void) setSession: (NSString *) session {
  [session retain_stub];
  [__session release_stub];
  __session = session;
  __session_isset = YES;
}

- (BOOL) sessionIsSet {
  return __session_isset;
}

- (void) unsetSession {
  [__session release_stub];
  __session = nil;
  __session_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSession: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HotSearchRequest"];
  if (__session_isset) {
    if (__session != nil) {
      [outProtocol writeFieldBeginWithName: @"session" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __session];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HotSearchRequest("];
  [ms appendString: @"session:"];
  [ms appendFormat: @"\"%@\"", __session];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HotSearchResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithTags: (NSMutableArray *) tags
{
  self = [super init];
  __tags = [tags retain_stub];
  __tags_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
}

- (void) dealloc
{
  [__tags release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSMutableArray *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            NSString * _elem22 = [inProtocol readString];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setTags: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HotSearchResponse"];
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tags count]];
        int idx24;
        for (idx24 = 0; idx24 < [__tags count]; idx24++)
        {
          [outProtocol writeString: [__tags objectAtIndex: idx24]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HotSearchResponse("];
  [ms appendString: @"tags:"];
  [ms appendFormat: @"%@", __tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation searchConstants
+ (void) initialize {
}
@end

