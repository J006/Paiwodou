/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "auth.h"
#import "content.h"
#import "user.h"
#import "search.h"

#import "server.h"

@implementation InvalidOperation

- (id) init
{
  return [super initWithName: @"InvalidOperation" reason: @"unknown" userInfo: nil];
}

- (id) initWithError_id: (int32_t) error_id error_code: (NSString *) error_code
{
  self = [self init];
  __error_id = error_id;
  __error_id_isset = YES;
  __error_code = [error_code retain_stub];
  __error_code_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"error_id"])
  {
    __error_id = [decoder decodeInt32ForKey: @"error_id"];
    __error_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"error_code"])
  {
    __error_code = [[decoder decodeObjectForKey: @"error_code"] retain_stub];
    __error_code_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__error_id_isset)
  {
    [encoder encodeInt32: __error_id forKey: @"error_id"];
  }
  if (__error_code_isset)
  {
    [encoder encodeObject: __error_code forKey: @"error_code"];
  }
}

- (void) dealloc
{
  [__error_code release_stub];
  [super dealloc_stub];
}

- (int32_t) error_id {
  return __error_id;
}

- (void) setError_id: (int32_t) error_id {
  __error_id = error_id;
  __error_id_isset = YES;
}

- (BOOL) error_idIsSet {
  return __error_id_isset;
}

- (void) unsetError_id {
  __error_id_isset = NO;
}

- (NSString *) error_code {
  return [[__error_code retain_stub] autorelease_stub];
}

- (void) setError_code: (NSString *) error_code {
  [error_code retain_stub];
  [__error_code release_stub];
  __error_code = error_code;
  __error_code_isset = YES;
}

- (BOOL) error_codeIsSet {
  return __error_code_isset;
}

- (void) unsetError_code {
  [__error_code release_stub];
  __error_code = nil;
  __error_code_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setError_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setError_code: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"InvalidOperation"];
  if (__error_id_isset) {
    [outProtocol writeFieldBeginWithName: @"error_id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __error_id];
    [outProtocol writeFieldEnd];
  }
  if (__error_code_isset) {
    if (__error_code != nil) {
      [outProtocol writeFieldBeginWithName: @"error_code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __error_code];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"InvalidOperation("];
  [ms appendString: @"error_id:"];
  [ms appendFormat: @"%i", __error_id];
  [ms appendString: @",error_code:"];
  [ms appendFormat: @"\"%@\"", __error_code];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation serverConstants
+ (void) initialize {
}
@end

@interface ping_args : NSObject <TBase, NSCoding> {
  NSString * __msg;

  BOOL __msg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=msg, setter=setMsg:) NSString * msg;
#endif

- (id) init;
- (id) initWithMsg: (NSString *) msg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) msg;
- (void) setMsg: (NSString *) msg;
#endif
- (BOOL) msgIsSet;

@end

@implementation ping_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMsg: (NSString *) msg
{
  self = [super init];
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ping_args("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Ping_result : NSObject <TBase, NSCoding> {
  NSString * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Ping_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Ping_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Ping_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface email_login_args : NSObject <TBase, NSCoding> {
  EmailLoginRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) EmailLoginRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (EmailLoginRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EmailLoginRequest *) request;
- (void) setRequest: (EmailLoginRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation email_login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (EmailLoginRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (EmailLoginRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (EmailLoginRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          EmailLoginRequest *fieldValue = [[EmailLoginRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"email_login_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"email_login_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Email_login_result : NSObject <TBase, NSCoding> {
  EmailLoginResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) EmailLoginResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (EmailLoginResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (EmailLoginResponse *) success;
- (void) setSuccess: (EmailLoginResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Email_login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (EmailLoginResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (EmailLoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (EmailLoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          EmailLoginResponse *fieldValue = [[EmailLoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Email_login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Email_login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface qq_login_args : NSObject <TBase, NSCoding> {
  SocialLoginRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SocialLoginRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SocialLoginRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginRequest *) request;
- (void) setRequest: (SocialLoginRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation qq_login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SocialLoginRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SocialLoginRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SocialLoginRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SocialLoginRequest *fieldValue = [[SocialLoginRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"qq_login_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"qq_login_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Qq_login_result : NSObject <TBase, NSCoding> {
  SocialLoginResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SocialLoginResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginResponse *) success;
- (void) setSuccess: (SocialLoginResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Qq_login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (SocialLoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SocialLoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SocialLoginResponse *fieldValue = [[SocialLoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Qq_login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Qq_login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface weibo_login_args : NSObject <TBase, NSCoding> {
  SocialLoginRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SocialLoginRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SocialLoginRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginRequest *) request;
- (void) setRequest: (SocialLoginRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation weibo_login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SocialLoginRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SocialLoginRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SocialLoginRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SocialLoginRequest *fieldValue = [[SocialLoginRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"weibo_login_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"weibo_login_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Weibo_login_result : NSObject <TBase, NSCoding> {
  SocialLoginResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SocialLoginResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginResponse *) success;
- (void) setSuccess: (SocialLoginResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Weibo_login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (SocialLoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SocialLoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SocialLoginResponse *fieldValue = [[SocialLoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Weibo_login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Weibo_login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface weixin_login_args : NSObject <TBase, NSCoding> {
  SocialLoginRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SocialLoginRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SocialLoginRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginRequest *) request;
- (void) setRequest: (SocialLoginRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation weixin_login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SocialLoginRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SocialLoginRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SocialLoginRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SocialLoginRequest *fieldValue = [[SocialLoginRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"weixin_login_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"weixin_login_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Weixin_login_result : NSObject <TBase, NSCoding> {
  SocialLoginResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SocialLoginResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SocialLoginResponse *) success;
- (void) setSuccess: (SocialLoginResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Weixin_login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SocialLoginResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (SocialLoginResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SocialLoginResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SocialLoginResponse *fieldValue = [[SocialLoginResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Weixin_login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Weixin_login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_feed_args : NSObject <TBase, NSCoding> {
  GetFeedRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetFeedRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetFeedRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFeedRequest *) request;
- (void) setRequest: (GetFeedRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_feed_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetFeedRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetFeedRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetFeedRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetFeedRequest *fieldValue = [[GetFeedRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_feed_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_feed_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_feed_result : NSObject <TBase, NSCoding> {
  GetFeedResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetFeedResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetFeedResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFeedResponse *) success;
- (void) setSuccess: (GetFeedResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_feed_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetFeedResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetFeedResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetFeedResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetFeedResponse *fieldValue = [[GetFeedResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_feed_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_feed_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_recommend_pocket_args : NSObject <TBase, NSCoding> {
  GetRecommendPocketRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetRecommendPocketRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetRecommendPocketRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRecommendPocketRequest *) request;
- (void) setRequest: (GetRecommendPocketRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_recommend_pocket_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetRecommendPocketRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetRecommendPocketRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetRecommendPocketRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetRecommendPocketRequest *fieldValue = [[GetRecommendPocketRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_recommend_pocket_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_recommend_pocket_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_recommend_pocket_result : NSObject <TBase, NSCoding> {
  GetRecommendPocketResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetRecommendPocketResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetRecommendPocketResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRecommendPocketResponse *) success;
- (void) setSuccess: (GetRecommendPocketResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_recommend_pocket_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetRecommendPocketResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetRecommendPocketResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetRecommendPocketResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetRecommendPocketResponse *fieldValue = [[GetRecommendPocketResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_recommend_pocket_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_recommend_pocket_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_recommend_user_args : NSObject <TBase, NSCoding> {
  GetRecommendUserRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetRecommendUserRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetRecommendUserRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRecommendUserRequest *) request;
- (void) setRequest: (GetRecommendUserRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_recommend_user_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetRecommendUserRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetRecommendUserRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetRecommendUserRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetRecommendUserRequest *fieldValue = [[GetRecommendUserRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_recommend_user_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_recommend_user_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_recommend_user_result : NSObject <TBase, NSCoding> {
  GetRecommendUserResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetRecommendUserResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetRecommendUserResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetRecommendUserResponse *) success;
- (void) setSuccess: (GetRecommendUserResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_recommend_user_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetRecommendUserResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetRecommendUserResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetRecommendUserResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetRecommendUserResponse *fieldValue = [[GetRecommendUserResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_recommend_user_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_recommend_user_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_dynamic_list_args : NSObject <TBase, NSCoding> {
  GetDynamicListRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetDynamicListRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetDynamicListRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetDynamicListRequest *) request;
- (void) setRequest: (GetDynamicListRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_dynamic_list_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetDynamicListRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetDynamicListRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetDynamicListRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetDynamicListRequest *fieldValue = [[GetDynamicListRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_dynamic_list_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_dynamic_list_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_dynamic_list_result : NSObject <TBase, NSCoding> {
  GetDynamicListResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetDynamicListResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetDynamicListResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetDynamicListResponse *) success;
- (void) setSuccess: (GetDynamicListResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_dynamic_list_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetDynamicListResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetDynamicListResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetDynamicListResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetDynamicListResponse *fieldValue = [[GetDynamicListResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_dynamic_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_dynamic_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_album_list_args : NSObject <TBase, NSCoding> {
  GetAlbumListRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetAlbumListRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetAlbumListRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAlbumListRequest *) request;
- (void) setRequest: (GetAlbumListRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_album_list_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetAlbumListRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetAlbumListRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetAlbumListRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetAlbumListRequest *fieldValue = [[GetAlbumListRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_album_list_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_album_list_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_album_list_result : NSObject <TBase, NSCoding> {
  GetAlbumListResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetAlbumListResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetAlbumListResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAlbumListResponse *) success;
- (void) setSuccess: (GetAlbumListResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_album_list_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetAlbumListResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetAlbumListResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetAlbumListResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetAlbumListResponse *fieldValue = [[GetAlbumListResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_album_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_album_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_album_args : NSObject <TBase, NSCoding> {
  GetAlbumRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetAlbumRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetAlbumRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAlbumRequest *) request;
- (void) setRequest: (GetAlbumRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_album_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetAlbumRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetAlbumRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetAlbumRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetAlbumRequest *fieldValue = [[GetAlbumRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_album_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_album_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_album_result : NSObject <TBase, NSCoding> {
  GetAlbumResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetAlbumResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetAlbumResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetAlbumResponse *) success;
- (void) setSuccess: (GetAlbumResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_album_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetAlbumResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetAlbumResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetAlbumResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetAlbumResponse *fieldValue = [[GetAlbumResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_album_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_album_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_photo_args : NSObject <TBase, NSCoding> {
  GetPhotoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPhotoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPhotoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoRequest *) request;
- (void) setRequest: (GetPhotoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_photo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPhotoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPhotoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPhotoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPhotoRequest *fieldValue = [[GetPhotoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_photo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_photo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_photo_result : NSObject <TBase, NSCoding> {
  GetPhotoResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPhotoResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPhotoResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoResponse *) success;
- (void) setSuccess: (GetPhotoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_photo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPhotoResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPhotoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPhotoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPhotoResponse *fieldValue = [[GetPhotoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_photo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_photo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_photo_recommend_args : NSObject <TBase, NSCoding> {
  GetPhotoRecommendRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPhotoRecommendRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPhotoRecommendRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoRecommendRequest *) request;
- (void) setRequest: (GetPhotoRecommendRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_photo_recommend_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPhotoRecommendRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPhotoRecommendRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPhotoRecommendRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPhotoRecommendRequest *fieldValue = [[GetPhotoRecommendRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_photo_recommend_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_photo_recommend_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_photo_recommend_result : NSObject <TBase, NSCoding> {
  GetPhotoRecommendResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPhotoRecommendResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPhotoRecommendResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoRecommendResponse *) success;
- (void) setSuccess: (GetPhotoRecommendResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_photo_recommend_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPhotoRecommendResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPhotoRecommendResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPhotoRecommendResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPhotoRecommendResponse *fieldValue = [[GetPhotoRecommendResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_photo_recommend_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_photo_recommend_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_photo_comment_args : NSObject <TBase, NSCoding> {
  GetPhotoCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPhotoCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPhotoCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoCommentRequest *) request;
- (void) setRequest: (GetPhotoCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_photo_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPhotoCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPhotoCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPhotoCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPhotoCommentRequest *fieldValue = [[GetPhotoCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_photo_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_photo_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_photo_comment_result : NSObject <TBase, NSCoding> {
  GetPhotoCommentResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPhotoCommentResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPhotoCommentResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPhotoCommentResponse *) success;
- (void) setSuccess: (GetPhotoCommentResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_photo_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPhotoCommentResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPhotoCommentResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPhotoCommentResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPhotoCommentResponse *fieldValue = [[GetPhotoCommentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_photo_comment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_photo_comment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_photo_comment_args : NSObject <TBase, NSCoding> {
  AddPhotoCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPhotoCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPhotoCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPhotoCommentRequest *) request;
- (void) setRequest: (AddPhotoCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_photo_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPhotoCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPhotoCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPhotoCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPhotoCommentRequest *fieldValue = [[AddPhotoCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_photo_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_photo_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_photo_comment_result : NSObject <TBase, NSCoding> {
  AddPhotoCommentResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AddPhotoCommentResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (AddPhotoCommentResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPhotoCommentResponse *) success;
- (void) setSuccess: (AddPhotoCommentResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_photo_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AddPhotoCommentResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (AddPhotoCommentResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AddPhotoCommentResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AddPhotoCommentResponse *fieldValue = [[AddPhotoCommentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_photo_comment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_photo_comment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_photo_comment_args : NSObject <TBase, NSCoding> {
  DeletePhotoCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePhotoCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePhotoCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePhotoCommentRequest *) request;
- (void) setRequest: (DeletePhotoCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_photo_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePhotoCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePhotoCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePhotoCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePhotoCommentRequest *fieldValue = [[DeletePhotoCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_photo_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_photo_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_photo_comment_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_photo_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_photo_comment_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_photo_comment_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_pocket_list_args : NSObject <TBase, NSCoding> {
  GetPocketListRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPocketListRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPocketListRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketListRequest *) request;
- (void) setRequest: (GetPocketListRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_pocket_list_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPocketListRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPocketListRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPocketListRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPocketListRequest *fieldValue = [[GetPocketListRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_pocket_list_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_pocket_list_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_pocket_list_result : NSObject <TBase, NSCoding> {
  GetPocketListResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPocketListResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPocketListResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketListResponse *) success;
- (void) setSuccess: (GetPocketListResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_pocket_list_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPocketListResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPocketListResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPocketListResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPocketListResponse *fieldValue = [[GetPocketListResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_pocket_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_pocket_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_pocket_args : NSObject <TBase, NSCoding> {
  GetPocketRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPocketRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPocketRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketRequest *) request;
- (void) setRequest: (GetPocketRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_pocket_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPocketRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPocketRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPocketRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPocketRequest *fieldValue = [[GetPocketRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_pocket_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_pocket_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_pocket_result : NSObject <TBase, NSCoding> {
  GetPocketResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPocketResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPocketResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketResponse *) success;
- (void) setSuccess: (GetPocketResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_pocket_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPocketResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPocketResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPocketResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPocketResponse *fieldValue = [[GetPocketResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_pocket_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_pocket_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_pocket_comment_args : NSObject <TBase, NSCoding> {
  GetPocketCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetPocketCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetPocketCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketCommentRequest *) request;
- (void) setRequest: (GetPocketCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_pocket_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetPocketCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetPocketCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetPocketCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetPocketCommentRequest *fieldValue = [[GetPocketCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_pocket_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_pocket_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_pocket_comment_result : NSObject <TBase, NSCoding> {
  GetPocketCommentResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetPocketCommentResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetPocketCommentResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetPocketCommentResponse *) success;
- (void) setSuccess: (GetPocketCommentResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_pocket_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetPocketCommentResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetPocketCommentResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetPocketCommentResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetPocketCommentResponse *fieldValue = [[GetPocketCommentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_pocket_comment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_pocket_comment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_pocket_comment_args : NSObject <TBase, NSCoding> {
  AddPocketCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPocketCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPocketCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPocketCommentRequest *) request;
- (void) setRequest: (AddPocketCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_pocket_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPocketCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPocketCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPocketCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPocketCommentRequest *fieldValue = [[AddPocketCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_pocket_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_pocket_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_pocket_comment_result : NSObject <TBase, NSCoding> {
  AddPocketCommentResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AddPocketCommentResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (AddPocketCommentResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPocketCommentResponse *) success;
- (void) setSuccess: (AddPocketCommentResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_pocket_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AddPocketCommentResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (AddPocketCommentResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AddPocketCommentResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AddPocketCommentResponse *fieldValue = [[AddPocketCommentResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_pocket_comment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_pocket_comment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_pocket_comment_args : NSObject <TBase, NSCoding> {
  DeletePocketCommentRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePocketCommentRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePocketCommentRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePocketCommentRequest *) request;
- (void) setRequest: (DeletePocketCommentRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_pocket_comment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePocketCommentRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePocketCommentRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePocketCommentRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePocketCommentRequest *fieldValue = [[DeletePocketCommentRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_pocket_comment_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_pocket_comment_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_pocket_comment_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_pocket_comment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_pocket_comment_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_pocket_comment_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_upload_args : NSObject <TBase, NSCoding> {
  GetUploadRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetUploadRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetUploadRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUploadRequest *) request;
- (void) setRequest: (GetUploadRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_upload_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetUploadRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetUploadRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetUploadRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetUploadRequest *fieldValue = [[GetUploadRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_upload_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_upload_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_upload_result : NSObject <TBase, NSCoding> {
  GetUploadResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetUploadResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetUploadResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUploadResponse *) success;
- (void) setSuccess: (GetUploadResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_upload_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetUploadResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetUploadResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetUploadResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetUploadResponse *fieldValue = [[GetUploadResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_upload_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_upload_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_home_args : NSObject <TBase, NSCoding> {
  GetHomeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetHomeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetHomeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetHomeRequest *) request;
- (void) setRequest: (GetHomeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_home_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetHomeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetHomeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetHomeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetHomeRequest *fieldValue = [[GetHomeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_home_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_home_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_home_result : NSObject <TBase, NSCoding> {
  GetHomeResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetHomeResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetHomeResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetHomeResponse *) success;
- (void) setSuccess: (GetHomeResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_home_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetHomeResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetHomeResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetHomeResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetHomeResponse *fieldValue = [[GetHomeResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_home_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_home_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_top_user_args : NSObject <TBase, NSCoding> {
  GetTopUserRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetTopUserRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetTopUserRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetTopUserRequest *) request;
- (void) setRequest: (GetTopUserRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_top_user_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetTopUserRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetTopUserRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetTopUserRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetTopUserRequest *fieldValue = [[GetTopUserRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_top_user_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_top_user_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_top_user_result : NSObject <TBase, NSCoding> {
  GetTopUserResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetTopUserResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetTopUserResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetTopUserResponse *) success;
- (void) setSuccess: (GetTopUserResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_top_user_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetTopUserResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetTopUserResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetTopUserResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetTopUserResponse *fieldValue = [[GetTopUserResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_top_user_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_top_user_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface follow_args : NSObject <TBase, NSCoding> {
  FollowRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) FollowRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (FollowRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (FollowRequest *) request;
- (void) setRequest: (FollowRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation follow_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (FollowRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (FollowRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (FollowRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          FollowRequest *fieldValue = [[FollowRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"follow_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"follow_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Follow_result : NSObject <TBase, NSCoding> {
  FollowResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) FollowResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (FollowResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (FollowResponse *) success;
- (void) setSuccess: (FollowResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Follow_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (FollowResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (FollowResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (FollowResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          FollowResponse *fieldValue = [[FollowResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Follow_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Follow_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface un_follow_args : NSObject <TBase, NSCoding> {
  UnFollowRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) UnFollowRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (UnFollowRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UnFollowRequest *) request;
- (void) setRequest: (UnFollowRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation un_follow_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (UnFollowRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (UnFollowRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (UnFollowRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UnFollowRequest *fieldValue = [[UnFollowRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"un_follow_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"un_follow_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Un_follow_result : NSObject <TBase, NSCoding> {
  UnFollowResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UnFollowResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (UnFollowResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UnFollowResponse *) success;
- (void) setSuccess: (UnFollowResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Un_follow_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UnFollowResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (UnFollowResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UnFollowResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UnFollowResponse *fieldValue = [[UnFollowResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Un_follow_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Un_follow_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_follow_list_args : NSObject <TBase, NSCoding> {
  GetFollowListRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetFollowListRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetFollowListRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFollowListRequest *) request;
- (void) setRequest: (GetFollowListRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_follow_list_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetFollowListRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetFollowListRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetFollowListRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetFollowListRequest *fieldValue = [[GetFollowListRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_follow_list_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_follow_list_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_follow_list_result : NSObject <TBase, NSCoding> {
  GetFollowListResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetFollowListResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetFollowListResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFollowListResponse *) success;
- (void) setSuccess: (GetFollowListResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_follow_list_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetFollowListResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetFollowListResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetFollowListResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetFollowListResponse *fieldValue = [[GetFollowListResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_follow_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_follow_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_follower_list_args : NSObject <TBase, NSCoding> {
  GetFollowerListRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetFollowerListRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetFollowerListRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFollowerListRequest *) request;
- (void) setRequest: (GetFollowerListRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_follower_list_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetFollowerListRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetFollowerListRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetFollowerListRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetFollowerListRequest *fieldValue = [[GetFollowerListRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_follower_list_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_follower_list_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_follower_list_result : NSObject <TBase, NSCoding> {
  GetFollowerListResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetFollowerListResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetFollowerListResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFollowerListResponse *) success;
- (void) setSuccess: (GetFollowerListResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_follower_list_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetFollowerListResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetFollowerListResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetFollowerListResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetFollowerListResponse *fieldValue = [[GetFollowerListResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_follower_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_follower_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_photo_like_args : NSObject <TBase, NSCoding> {
  AddPhotoLikeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPhotoLikeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPhotoLikeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPhotoLikeRequest *) request;
- (void) setRequest: (AddPhotoLikeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_photo_like_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPhotoLikeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPhotoLikeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPhotoLikeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPhotoLikeRequest *fieldValue = [[AddPhotoLikeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_photo_like_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_photo_like_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_photo_like_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_photo_like_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_photo_like_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_photo_like_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_photo_like_args : NSObject <TBase, NSCoding> {
  DeletePhotoLikeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePhotoLikeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePhotoLikeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePhotoLikeRequest *) request;
- (void) setRequest: (DeletePhotoLikeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_photo_like_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePhotoLikeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePhotoLikeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePhotoLikeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePhotoLikeRequest *fieldValue = [[DeletePhotoLikeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_photo_like_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_photo_like_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_photo_like_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_photo_like_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_photo_like_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_photo_like_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_pocket_like_args : NSObject <TBase, NSCoding> {
  AddPocketLikeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPocketLikeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPocketLikeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPocketLikeRequest *) request;
- (void) setRequest: (AddPocketLikeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_pocket_like_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPocketLikeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPocketLikeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPocketLikeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPocketLikeRequest *fieldValue = [[AddPocketLikeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_pocket_like_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_pocket_like_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_pocket_like_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_pocket_like_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_pocket_like_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_pocket_like_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_pocket_like_args : NSObject <TBase, NSCoding> {
  DeletePocketLikeRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePocketLikeRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePocketLikeRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePocketLikeRequest *) request;
- (void) setRequest: (DeletePocketLikeRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_pocket_like_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePocketLikeRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePocketLikeRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePocketLikeRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePocketLikeRequest *fieldValue = [[DeletePocketLikeRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_pocket_like_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_pocket_like_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_pocket_like_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_pocket_like_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_pocket_like_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_pocket_like_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_photo_recommend_args : NSObject <TBase, NSCoding> {
  AddPhotoRecommendRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPhotoRecommendRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPhotoRecommendRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPhotoRecommendRequest *) request;
- (void) setRequest: (AddPhotoRecommendRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_photo_recommend_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPhotoRecommendRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPhotoRecommendRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPhotoRecommendRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPhotoRecommendRequest *fieldValue = [[AddPhotoRecommendRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_photo_recommend_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_photo_recommend_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_photo_recommend_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_photo_recommend_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_photo_recommend_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_photo_recommend_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_photo_recommend_args : NSObject <TBase, NSCoding> {
  DeletePhotoRecommendRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePhotoRecommendRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePhotoRecommendRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePhotoRecommendRequest *) request;
- (void) setRequest: (DeletePhotoRecommendRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_photo_recommend_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePhotoRecommendRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePhotoRecommendRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePhotoRecommendRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePhotoRecommendRequest *fieldValue = [[DeletePhotoRecommendRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_photo_recommend_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_photo_recommend_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_photo_recommend_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_photo_recommend_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_photo_recommend_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_photo_recommend_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface add_pocket_recommend_args : NSObject <TBase, NSCoding> {
  AddPocketRecommendRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) AddPocketRecommendRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (AddPocketRecommendRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AddPocketRecommendRequest *) request;
- (void) setRequest: (AddPocketRecommendRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation add_pocket_recommend_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (AddPocketRecommendRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (AddPocketRecommendRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (AddPocketRecommendRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AddPocketRecommendRequest *fieldValue = [[AddPocketRecommendRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_pocket_recommend_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_pocket_recommend_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_pocket_recommend_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Add_pocket_recommend_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_pocket_recommend_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_pocket_recommend_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delete_pocket_recommend_args : NSObject <TBase, NSCoding> {
  DeletePocketRecommendRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) DeletePocketRecommendRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (DeletePocketRecommendRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DeletePocketRecommendRequest *) request;
- (void) setRequest: (DeletePocketRecommendRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation delete_pocket_recommend_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (DeletePocketRecommendRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (DeletePocketRecommendRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (DeletePocketRecommendRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          DeletePocketRecommendRequest *fieldValue = [[DeletePocketRecommendRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delete_pocket_recommend_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delete_pocket_recommend_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Delete_pocket_recommend_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Delete_pocket_recommend_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Delete_pocket_recommend_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Delete_pocket_recommend_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface put_stype_args : NSObject <TBase, NSCoding> {
  PutStyleRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) PutStyleRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (PutStyleRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (PutStyleRequest *) request;
- (void) setRequest: (PutStyleRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation put_stype_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (PutStyleRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (PutStyleRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (PutStyleRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          PutStyleRequest *fieldValue = [[PutStyleRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"put_stype_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"put_stype_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Put_stype_result : NSObject <TBase, NSCoding> {
  InvalidOperation * __crash;

  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithCrash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Put_stype_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCrash: (InvalidOperation *) crash
{
  self = [super init];
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__crash release_stub];
  [super dealloc_stub];
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Put_stype_result"];

  if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Put_stype_result("];
  [ms appendString: @"crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface get_user_info_args : NSObject <TBase, NSCoding> {
  GetUserInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) GetUserInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (GetUserInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUserInfoRequest *) request;
- (void) setRequest: (GetUserInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation get_user_info_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (GetUserInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (GetUserInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (GetUserInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GetUserInfoRequest *fieldValue = [[GetUserInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"get_user_info_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"get_user_info_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Get_user_info_result : NSObject <TBase, NSCoding> {
  GetUserInfoResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetUserInfoResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (GetUserInfoResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetUserInfoResponse *) success;
- (void) setSuccess: (GetUserInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Get_user_info_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetUserInfoResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (GetUserInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetUserInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetUserInfoResponse *fieldValue = [[GetUserInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_user_info_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_user_info_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface modify_user_info_args : NSObject <TBase, NSCoding> {
  ModifyUserInfoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) ModifyUserInfoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (ModifyUserInfoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ModifyUserInfoRequest *) request;
- (void) setRequest: (ModifyUserInfoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation modify_user_info_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (ModifyUserInfoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (ModifyUserInfoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (ModifyUserInfoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ModifyUserInfoRequest *fieldValue = [[ModifyUserInfoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"modify_user_info_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"modify_user_info_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Modify_user_info_result : NSObject <TBase, NSCoding> {
  ModifyUserInfoResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ModifyUserInfoResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (ModifyUserInfoResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ModifyUserInfoResponse *) success;
- (void) setSuccess: (ModifyUserInfoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Modify_user_info_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ModifyUserInfoResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (ModifyUserInfoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ModifyUserInfoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ModifyUserInfoResponse *fieldValue = [[ModifyUserInfoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Modify_user_info_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Modify_user_info_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface search_photo_args : NSObject <TBase, NSCoding> {
  SearchPhotoRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SearchPhotoRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SearchPhotoRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchPhotoRequest *) request;
- (void) setRequest: (SearchPhotoRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation search_photo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SearchPhotoRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SearchPhotoRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SearchPhotoRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchPhotoRequest *fieldValue = [[SearchPhotoRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"search_photo_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"search_photo_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Search_photo_result : NSObject <TBase, NSCoding> {
  SearchPhotoResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SearchPhotoResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (SearchPhotoResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchPhotoResponse *) success;
- (void) setSuccess: (SearchPhotoResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Search_photo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SearchPhotoResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (SearchPhotoResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SearchPhotoResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SearchPhotoResponse *fieldValue = [[SearchPhotoResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Search_photo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Search_photo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface search_user_args : NSObject <TBase, NSCoding> {
  SearchUserRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SearchUserRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SearchUserRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchUserRequest *) request;
- (void) setRequest: (SearchUserRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation search_user_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SearchUserRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SearchUserRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SearchUserRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchUserRequest *fieldValue = [[SearchUserRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"search_user_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"search_user_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Search_user_result : NSObject <TBase, NSCoding> {
  SearchUserResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SearchUserResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (SearchUserResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchUserResponse *) success;
- (void) setSuccess: (SearchUserResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Search_user_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (SearchUserResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (SearchUserResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SearchUserResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          SearchUserResponse *fieldValue = [[SearchUserResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Search_user_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Search_user_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface hot_search_args : NSObject <TBase, NSCoding> {
  HotSearchRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) HotSearchRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (HotSearchRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (HotSearchRequest *) request;
- (void) setRequest: (HotSearchRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation hot_search_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (HotSearchRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (HotSearchRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (HotSearchRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          HotSearchRequest *fieldValue = [[HotSearchRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"hot_search_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"hot_search_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Hot_search_result : NSObject <TBase, NSCoding> {
  HotSearchResponse * __success;
  InvalidOperation * __crash;

  BOOL __success_isset;
  BOOL __crash_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HotSearchResponse * success;
@property (nonatomic, retain, getter=crash, setter=setCrash:) InvalidOperation * crash;
#endif

- (id) init;
- (id) initWithSuccess: (HotSearchResponse *) success crash: (InvalidOperation *) crash;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (HotSearchResponse *) success;
- (void) setSuccess: (HotSearchResponse *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (InvalidOperation *) crash;
- (void) setCrash: (InvalidOperation *) crash;
#endif
- (BOOL) crashIsSet;

@end

@implementation Hot_search_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (HotSearchResponse *) success crash: (InvalidOperation *) crash
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __crash = [crash retain_stub];
  __crash_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"crash"])
  {
    __crash = [[decoder decodeObjectForKey: @"crash"] retain_stub];
    __crash_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__crash_isset)
  {
    [encoder encodeObject: __crash forKey: @"crash"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__crash release_stub];
  [super dealloc_stub];
}

- (HotSearchResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (HotSearchResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (InvalidOperation *) crash {
  return [[__crash retain_stub] autorelease_stub];
}

- (void) setCrash: (InvalidOperation *) crash {
  [crash retain_stub];
  [__crash release_stub];
  __crash = crash;
  __crash_isset = YES;
}

- (BOOL) crashIsSet {
  return __crash_isset;
}

- (void) unsetCrash {
  [__crash release_stub];
  __crash = nil;
  __crash_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          HotSearchResponse *fieldValue = [[HotSearchResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          InvalidOperation *fieldValue = [[InvalidOperation alloc] init];
          [fieldValue read: inProtocol];
          [self setCrash: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Hot_search_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__crash_isset) {
    if (__crash != nil) {
      [outProtocol writeFieldBeginWithName: @"crash" type: TType_STRUCT fieldID: 1];
      [__crash write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Hot_search_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",crash:"];
  [ms appendFormat: @"%@", __crash];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppServerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_ping: (NSString *) msg
{
  [outProtocol writeMessageBeginWithName: @"ping" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ping_args"];
  if (msg != nil)  {
    [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
    [outProtocol writeString: msg];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_ping
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Ping_result * result = [[[Ping_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ping failed: unknown result"];
}

- (NSString *) ping: (NSString *) msg
{
  [self send_ping : msg];
  return [self recv_ping];
}

- (void) send_email_login: (EmailLoginRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"email_login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"email_login_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (EmailLoginResponse *) recv_email_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Email_login_result * result = [[[Email_login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"email_login failed: unknown result"];
}

- (EmailLoginResponse *) email_login: (EmailLoginRequest *) request
{
  [self send_email_login : request];
  return [self recv_email_login];
}

- (void) send_qq_login: (SocialLoginRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"qq_login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"qq_login_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SocialLoginResponse *) recv_qq_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Qq_login_result * result = [[[Qq_login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"qq_login failed: unknown result"];
}

- (SocialLoginResponse *) qq_login: (SocialLoginRequest *) request
{
  [self send_qq_login : request];
  return [self recv_qq_login];
}

- (void) send_weibo_login: (SocialLoginRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"weibo_login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"weibo_login_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SocialLoginResponse *) recv_weibo_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Weibo_login_result * result = [[[Weibo_login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"weibo_login failed: unknown result"];
}

- (SocialLoginResponse *) weibo_login: (SocialLoginRequest *) request
{
  [self send_weibo_login : request];
  return [self recv_weibo_login];
}

- (void) send_weixin_login: (SocialLoginRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"weixin_login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"weixin_login_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SocialLoginResponse *) recv_weixin_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Weixin_login_result * result = [[[Weixin_login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"weixin_login failed: unknown result"];
}

- (SocialLoginResponse *) weixin_login: (SocialLoginRequest *) request
{
  [self send_weixin_login : request];
  return [self recv_weixin_login];
}

- (void) send_get_feed: (GetFeedRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_feed" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_feed_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetFeedResponse *) recv_get_feed
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_feed_result * result = [[[Get_feed_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_feed failed: unknown result"];
}

- (GetFeedResponse *) get_feed: (GetFeedRequest *) request
{
  [self send_get_feed : request];
  return [self recv_get_feed];
}

- (void) send_get_recommend_pocket: (GetRecommendPocketRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_recommend_pocket" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_recommend_pocket_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetRecommendPocketResponse *) recv_get_recommend_pocket
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_recommend_pocket_result * result = [[[Get_recommend_pocket_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_recommend_pocket failed: unknown result"];
}

- (GetRecommendPocketResponse *) get_recommend_pocket: (GetRecommendPocketRequest *) request
{
  [self send_get_recommend_pocket : request];
  return [self recv_get_recommend_pocket];
}

- (void) send_get_recommend_user: (GetRecommendUserRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_recommend_user" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_recommend_user_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetRecommendUserResponse *) recv_get_recommend_user
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_recommend_user_result * result = [[[Get_recommend_user_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_recommend_user failed: unknown result"];
}

- (GetRecommendUserResponse *) get_recommend_user: (GetRecommendUserRequest *) request
{
  [self send_get_recommend_user : request];
  return [self recv_get_recommend_user];
}

- (void) send_get_dynamic_list: (GetDynamicListRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_dynamic_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_dynamic_list_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetDynamicListResponse *) recv_get_dynamic_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_dynamic_list_result * result = [[[Get_dynamic_list_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_dynamic_list failed: unknown result"];
}

- (GetDynamicListResponse *) get_dynamic_list: (GetDynamicListRequest *) request
{
  [self send_get_dynamic_list : request];
  return [self recv_get_dynamic_list];
}

- (void) send_get_album_list: (GetAlbumListRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_album_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_album_list_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetAlbumListResponse *) recv_get_album_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_album_list_result * result = [[[Get_album_list_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_album_list failed: unknown result"];
}

- (GetAlbumListResponse *) get_album_list: (GetAlbumListRequest *) request
{
  [self send_get_album_list : request];
  return [self recv_get_album_list];
}

- (void) send_get_album: (GetAlbumRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_album" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_album_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetAlbumResponse *) recv_get_album
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_album_result * result = [[[Get_album_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_album failed: unknown result"];
}

- (GetAlbumResponse *) get_album: (GetAlbumRequest *) request
{
  [self send_get_album : request];
  return [self recv_get_album];
}

- (void) send_get_photo: (GetPhotoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_photo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_photo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPhotoResponse *) recv_get_photo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_photo_result * result = [[[Get_photo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_photo failed: unknown result"];
}

- (GetPhotoResponse *) get_photo: (GetPhotoRequest *) request
{
  [self send_get_photo : request];
  return [self recv_get_photo];
}

- (void) send_get_photo_recommend: (GetPhotoRecommendRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_photo_recommend" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_photo_recommend_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPhotoRecommendResponse *) recv_get_photo_recommend
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_photo_recommend_result * result = [[[Get_photo_recommend_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_photo_recommend failed: unknown result"];
}

- (GetPhotoRecommendResponse *) get_photo_recommend: (GetPhotoRecommendRequest *) request
{
  [self send_get_photo_recommend : request];
  return [self recv_get_photo_recommend];
}

- (void) send_get_photo_comment: (GetPhotoCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_photo_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_photo_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPhotoCommentResponse *) recv_get_photo_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_photo_comment_result * result = [[[Get_photo_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_photo_comment failed: unknown result"];
}

- (GetPhotoCommentResponse *) get_photo_comment: (GetPhotoCommentRequest *) request
{
  [self send_get_photo_comment : request];
  return [self recv_get_photo_comment];
}

- (void) send_add_photo_comment: (AddPhotoCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_photo_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_photo_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AddPhotoCommentResponse *) recv_add_photo_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_photo_comment_result * result = [[[Add_photo_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"add_photo_comment failed: unknown result"];
}

- (AddPhotoCommentResponse *) add_photo_comment: (AddPhotoCommentRequest *) request
{
  [self send_add_photo_comment : request];
  return [self recv_add_photo_comment];
}

- (void) send_delete_photo_comment: (DeletePhotoCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_photo_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_photo_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_photo_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_photo_comment_result * result = [[[Delete_photo_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_photo_comment: (DeletePhotoCommentRequest *) request
{
  [self send_delete_photo_comment : request];
  [self recv_delete_photo_comment];
}

- (void) send_get_pocket_list: (GetPocketListRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_pocket_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_pocket_list_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPocketListResponse *) recv_get_pocket_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_pocket_list_result * result = [[[Get_pocket_list_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_pocket_list failed: unknown result"];
}

- (GetPocketListResponse *) get_pocket_list: (GetPocketListRequest *) request
{
  [self send_get_pocket_list : request];
  return [self recv_get_pocket_list];
}

- (void) send_get_pocket: (GetPocketRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_pocket" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_pocket_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPocketResponse *) recv_get_pocket
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_pocket_result * result = [[[Get_pocket_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_pocket failed: unknown result"];
}

- (GetPocketResponse *) get_pocket: (GetPocketRequest *) request
{
  [self send_get_pocket : request];
  return [self recv_get_pocket];
}

- (void) send_get_pocket_comment: (GetPocketCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_pocket_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_pocket_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetPocketCommentResponse *) recv_get_pocket_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_pocket_comment_result * result = [[[Get_pocket_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_pocket_comment failed: unknown result"];
}

- (GetPocketCommentResponse *) get_pocket_comment: (GetPocketCommentRequest *) request
{
  [self send_get_pocket_comment : request];
  return [self recv_get_pocket_comment];
}

- (void) send_add_pocket_comment: (AddPocketCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_pocket_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_pocket_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AddPocketCommentResponse *) recv_add_pocket_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_pocket_comment_result * result = [[[Add_pocket_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"add_pocket_comment failed: unknown result"];
}

- (AddPocketCommentResponse *) add_pocket_comment: (AddPocketCommentRequest *) request
{
  [self send_add_pocket_comment : request];
  return [self recv_add_pocket_comment];
}

- (void) send_delete_pocket_comment: (DeletePocketCommentRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_pocket_comment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_pocket_comment_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_pocket_comment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_pocket_comment_result * result = [[[Delete_pocket_comment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_pocket_comment: (DeletePocketCommentRequest *) request
{
  [self send_delete_pocket_comment : request];
  [self recv_delete_pocket_comment];
}

- (void) send_get_upload: (GetUploadRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_upload" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_upload_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetUploadResponse *) recv_get_upload
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_upload_result * result = [[[Get_upload_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_upload failed: unknown result"];
}

- (GetUploadResponse *) get_upload: (GetUploadRequest *) request
{
  [self send_get_upload : request];
  return [self recv_get_upload];
}

- (void) send_get_home: (GetHomeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_home" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_home_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetHomeResponse *) recv_get_home
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_home_result * result = [[[Get_home_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_home failed: unknown result"];
}

- (GetHomeResponse *) get_home: (GetHomeRequest *) request
{
  [self send_get_home : request];
  return [self recv_get_home];
}

- (void) send_get_top_user: (GetTopUserRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_top_user" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_top_user_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetTopUserResponse *) recv_get_top_user
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_top_user_result * result = [[[Get_top_user_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_top_user failed: unknown result"];
}

- (GetTopUserResponse *) get_top_user: (GetTopUserRequest *) request
{
  [self send_get_top_user : request];
  return [self recv_get_top_user];
}

- (void) send_follow: (FollowRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"follow" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"follow_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (FollowResponse *) recv_follow
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Follow_result * result = [[[Follow_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"follow failed: unknown result"];
}

- (FollowResponse *) follow: (FollowRequest *) request
{
  [self send_follow : request];
  return [self recv_follow];
}

- (void) send_un_follow: (UnFollowRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"un_follow" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"un_follow_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UnFollowResponse *) recv_un_follow
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Un_follow_result * result = [[[Un_follow_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"un_follow failed: unknown result"];
}

- (UnFollowResponse *) un_follow: (UnFollowRequest *) request
{
  [self send_un_follow : request];
  return [self recv_un_follow];
}

- (void) send_get_follow_list: (GetFollowListRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_follow_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_follow_list_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetFollowListResponse *) recv_get_follow_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_follow_list_result * result = [[[Get_follow_list_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_follow_list failed: unknown result"];
}

- (GetFollowListResponse *) get_follow_list: (GetFollowListRequest *) request
{
  [self send_get_follow_list : request];
  return [self recv_get_follow_list];
}

- (void) send_get_follower_list: (GetFollowerListRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_follower_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_follower_list_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetFollowerListResponse *) recv_get_follower_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_follower_list_result * result = [[[Get_follower_list_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_follower_list failed: unknown result"];
}

- (GetFollowerListResponse *) get_follower_list: (GetFollowerListRequest *) request
{
  [self send_get_follower_list : request];
  return [self recv_get_follower_list];
}

- (void) send_add_photo_like: (AddPhotoLikeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_photo_like" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_photo_like_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_add_photo_like
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_photo_like_result * result = [[[Add_photo_like_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) add_photo_like: (AddPhotoLikeRequest *) request
{
  [self send_add_photo_like : request];
  [self recv_add_photo_like];
}

- (void) send_delete_photo_like: (DeletePhotoLikeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_photo_like" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_photo_like_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_photo_like
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_photo_like_result * result = [[[Delete_photo_like_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_photo_like: (DeletePhotoLikeRequest *) request
{
  [self send_delete_photo_like : request];
  [self recv_delete_photo_like];
}

- (void) send_add_pocket_like: (AddPocketLikeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_pocket_like" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_pocket_like_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_add_pocket_like
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_pocket_like_result * result = [[[Add_pocket_like_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) add_pocket_like: (AddPocketLikeRequest *) request
{
  [self send_add_pocket_like : request];
  [self recv_add_pocket_like];
}

- (void) send_delete_pocket_like: (DeletePocketLikeRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_pocket_like" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_pocket_like_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_pocket_like
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_pocket_like_result * result = [[[Delete_pocket_like_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_pocket_like: (DeletePocketLikeRequest *) request
{
  [self send_delete_pocket_like : request];
  [self recv_delete_pocket_like];
}

- (void) send_add_photo_recommend: (AddPhotoRecommendRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_photo_recommend" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_photo_recommend_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_add_photo_recommend
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_photo_recommend_result * result = [[[Add_photo_recommend_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) add_photo_recommend: (AddPhotoRecommendRequest *) request
{
  [self send_add_photo_recommend : request];
  [self recv_add_photo_recommend];
}

- (void) send_delete_photo_recommend: (DeletePhotoRecommendRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_photo_recommend" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_photo_recommend_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_photo_recommend
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_photo_recommend_result * result = [[[Delete_photo_recommend_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_photo_recommend: (DeletePhotoRecommendRequest *) request
{
  [self send_delete_photo_recommend : request];
  [self recv_delete_photo_recommend];
}

- (void) send_add_pocket_recommend: (AddPocketRecommendRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"add_pocket_recommend" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_pocket_recommend_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_add_pocket_recommend
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_pocket_recommend_result * result = [[[Add_pocket_recommend_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) add_pocket_recommend: (AddPocketRecommendRequest *) request
{
  [self send_add_pocket_recommend : request];
  [self recv_add_pocket_recommend];
}

- (void) send_delete_pocket_recommend: (DeletePocketRecommendRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"delete_pocket_recommend" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delete_pocket_recommend_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_delete_pocket_recommend
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Delete_pocket_recommend_result * result = [[[Delete_pocket_recommend_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) delete_pocket_recommend: (DeletePocketRecommendRequest *) request
{
  [self send_delete_pocket_recommend : request];
  [self recv_delete_pocket_recommend];
}

- (void) send_put_stype: (PutStyleRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"put_stype" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"put_stype_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_put_stype
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Put_stype_result * result = [[[Put_stype_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  return;
}

- (void) put_stype: (PutStyleRequest *) request
{
  [self send_put_stype : request];
  [self recv_put_stype];
}

- (void) send_get_user_info: (GetUserInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"get_user_info" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_user_info_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GetUserInfoResponse *) recv_get_user_info
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_user_info_result * result = [[[Get_user_info_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_user_info failed: unknown result"];
}

- (GetUserInfoResponse *) get_user_info: (GetUserInfoRequest *) request
{
  [self send_get_user_info : request];
  return [self recv_get_user_info];
}

- (void) send_modify_user_info: (ModifyUserInfoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"modify_user_info" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"modify_user_info_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ModifyUserInfoResponse *) recv_modify_user_info
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Modify_user_info_result * result = [[[Modify_user_info_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"modify_user_info failed: unknown result"];
}

- (ModifyUserInfoResponse *) modify_user_info: (ModifyUserInfoRequest *) request
{
  [self send_modify_user_info : request];
  return [self recv_modify_user_info];
}

- (void) send_search_photo: (SearchPhotoRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"search_photo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"search_photo_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SearchPhotoResponse *) recv_search_photo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Search_photo_result * result = [[[Search_photo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"search_photo failed: unknown result"];
}

- (SearchPhotoResponse *) search_photo: (SearchPhotoRequest *) request
{
  [self send_search_photo : request];
  return [self recv_search_photo];
}

- (void) send_search_user: (SearchUserRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"search_user" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"search_user_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (SearchUserResponse *) recv_search_user
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Search_user_result * result = [[[Search_user_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"search_user failed: unknown result"];
}

- (SearchUserResponse *) search_user: (SearchUserRequest *) request
{
  [self send_search_user : request];
  return [self recv_search_user];
}

- (void) send_hot_search: (HotSearchRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"hot_search" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"hot_search_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (HotSearchResponse *) recv_hot_search
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Hot_search_result * result = [[[Hot_search_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result crashIsSet]) {
    @throw [result crash];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"hot_search failed: unknown result"];
}

- (HotSearchResponse *) hot_search: (HotSearchRequest *) request
{
  [self send_hot_search : request];
  return [self recv_hot_search];
}

@end

@implementation AppServerProcessor

- (id) initWithAppServer: (id <AppServer>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_ping_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"ping"];
  }
  {
    SEL s = @selector(process_email_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"email_login"];
  }
  {
    SEL s = @selector(process_qq_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"qq_login"];
  }
  {
    SEL s = @selector(process_weibo_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"weibo_login"];
  }
  {
    SEL s = @selector(process_weixin_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"weixin_login"];
  }
  {
    SEL s = @selector(process_get_feed_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_feed"];
  }
  {
    SEL s = @selector(process_get_recommend_pocket_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_recommend_pocket"];
  }
  {
    SEL s = @selector(process_get_recommend_user_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_recommend_user"];
  }
  {
    SEL s = @selector(process_get_dynamic_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_dynamic_list"];
  }
  {
    SEL s = @selector(process_get_album_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_album_list"];
  }
  {
    SEL s = @selector(process_get_album_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_album"];
  }
  {
    SEL s = @selector(process_get_photo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_photo"];
  }
  {
    SEL s = @selector(process_get_photo_recommend_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_photo_recommend"];
  }
  {
    SEL s = @selector(process_get_photo_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_photo_comment"];
  }
  {
    SEL s = @selector(process_add_photo_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_photo_comment"];
  }
  {
    SEL s = @selector(process_delete_photo_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_photo_comment"];
  }
  {
    SEL s = @selector(process_get_pocket_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_pocket_list"];
  }
  {
    SEL s = @selector(process_get_pocket_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_pocket"];
  }
  {
    SEL s = @selector(process_get_pocket_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_pocket_comment"];
  }
  {
    SEL s = @selector(process_add_pocket_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_pocket_comment"];
  }
  {
    SEL s = @selector(process_delete_pocket_comment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_pocket_comment"];
  }
  {
    SEL s = @selector(process_get_upload_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_upload"];
  }
  {
    SEL s = @selector(process_get_home_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_home"];
  }
  {
    SEL s = @selector(process_get_top_user_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_top_user"];
  }
  {
    SEL s = @selector(process_follow_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"follow"];
  }
  {
    SEL s = @selector(process_un_follow_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"un_follow"];
  }
  {
    SEL s = @selector(process_get_follow_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_follow_list"];
  }
  {
    SEL s = @selector(process_get_follower_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_follower_list"];
  }
  {
    SEL s = @selector(process_add_photo_like_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_photo_like"];
  }
  {
    SEL s = @selector(process_delete_photo_like_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_photo_like"];
  }
  {
    SEL s = @selector(process_add_pocket_like_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_pocket_like"];
  }
  {
    SEL s = @selector(process_delete_pocket_like_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_pocket_like"];
  }
  {
    SEL s = @selector(process_add_photo_recommend_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_photo_recommend"];
  }
  {
    SEL s = @selector(process_delete_photo_recommend_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_photo_recommend"];
  }
  {
    SEL s = @selector(process_add_pocket_recommend_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add_pocket_recommend"];
  }
  {
    SEL s = @selector(process_delete_pocket_recommend_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"delete_pocket_recommend"];
  }
  {
    SEL s = @selector(process_put_stype_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"put_stype"];
  }
  {
    SEL s = @selector(process_get_user_info_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"get_user_info"];
  }
  {
    SEL s = @selector(process_modify_user_info_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"modify_user_info"];
  }
  {
    SEL s = @selector(process_search_photo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"search_photo"];
  }
  {
    SEL s = @selector(process_search_user_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"search_user"];
  }
  {
    SEL s = @selector(process_hot_search_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"hot_search"];
  }
  return self;
}

- (id<AppServer>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_ping_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  ping_args * args = [[ping_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Ping_result * result = [[Ping_result alloc] init];
  [result setSuccess: [mService ping: [args msg]]];
  [outProtocol writeMessageBeginWithName: @"ping"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_email_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  email_login_args * args = [[email_login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Email_login_result * result = [[Email_login_result alloc] init];
  [result setSuccess: [mService email_login: [args request]]];
  [outProtocol writeMessageBeginWithName: @"email_login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_qq_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  qq_login_args * args = [[qq_login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Qq_login_result * result = [[Qq_login_result alloc] init];
  [result setSuccess: [mService qq_login: [args request]]];
  [outProtocol writeMessageBeginWithName: @"qq_login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_weibo_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  weibo_login_args * args = [[weibo_login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Weibo_login_result * result = [[Weibo_login_result alloc] init];
  [result setSuccess: [mService weibo_login: [args request]]];
  [outProtocol writeMessageBeginWithName: @"weibo_login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_weixin_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  weixin_login_args * args = [[weixin_login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Weixin_login_result * result = [[Weixin_login_result alloc] init];
  [result setSuccess: [mService weixin_login: [args request]]];
  [outProtocol writeMessageBeginWithName: @"weixin_login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_feed_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_feed_args * args = [[get_feed_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_feed_result * result = [[Get_feed_result alloc] init];
  [result setSuccess: [mService get_feed: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_feed"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_recommend_pocket_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_recommend_pocket_args * args = [[get_recommend_pocket_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_recommend_pocket_result * result = [[Get_recommend_pocket_result alloc] init];
  [result setSuccess: [mService get_recommend_pocket: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_recommend_pocket"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_recommend_user_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_recommend_user_args * args = [[get_recommend_user_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_recommend_user_result * result = [[Get_recommend_user_result alloc] init];
  [result setSuccess: [mService get_recommend_user: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_recommend_user"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_dynamic_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_dynamic_list_args * args = [[get_dynamic_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_dynamic_list_result * result = [[Get_dynamic_list_result alloc] init];
  [result setSuccess: [mService get_dynamic_list: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_dynamic_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_album_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_album_list_args * args = [[get_album_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_album_list_result * result = [[Get_album_list_result alloc] init];
  [result setSuccess: [mService get_album_list: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_album_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_album_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_album_args * args = [[get_album_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_album_result * result = [[Get_album_result alloc] init];
  [result setSuccess: [mService get_album: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_album"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_photo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_photo_args * args = [[get_photo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_photo_result * result = [[Get_photo_result alloc] init];
  [result setSuccess: [mService get_photo: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_photo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_photo_recommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_photo_recommend_args * args = [[get_photo_recommend_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_photo_recommend_result * result = [[Get_photo_recommend_result alloc] init];
  [result setSuccess: [mService get_photo_recommend: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_photo_recommend"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_photo_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_photo_comment_args * args = [[get_photo_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_photo_comment_result * result = [[Get_photo_comment_result alloc] init];
  [result setSuccess: [mService get_photo_comment: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_photo_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_photo_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_photo_comment_args * args = [[add_photo_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_photo_comment_result * result = [[Add_photo_comment_result alloc] init];
  [result setSuccess: [mService add_photo_comment: [args request]]];
  [outProtocol writeMessageBeginWithName: @"add_photo_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_photo_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_photo_comment_args * args = [[delete_photo_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_photo_comment_result * result = [[Delete_photo_comment_result alloc] init];
  [mService delete_photo_comment: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_photo_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_pocket_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_pocket_list_args * args = [[get_pocket_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_pocket_list_result * result = [[Get_pocket_list_result alloc] init];
  [result setSuccess: [mService get_pocket_list: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_pocket_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_pocket_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_pocket_args * args = [[get_pocket_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_pocket_result * result = [[Get_pocket_result alloc] init];
  [result setSuccess: [mService get_pocket: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_pocket"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_pocket_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_pocket_comment_args * args = [[get_pocket_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_pocket_comment_result * result = [[Get_pocket_comment_result alloc] init];
  [result setSuccess: [mService get_pocket_comment: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_pocket_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_pocket_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_pocket_comment_args * args = [[add_pocket_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_pocket_comment_result * result = [[Add_pocket_comment_result alloc] init];
  [result setSuccess: [mService add_pocket_comment: [args request]]];
  [outProtocol writeMessageBeginWithName: @"add_pocket_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_pocket_comment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_pocket_comment_args * args = [[delete_pocket_comment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_pocket_comment_result * result = [[Delete_pocket_comment_result alloc] init];
  [mService delete_pocket_comment: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_pocket_comment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_upload_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_upload_args * args = [[get_upload_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_upload_result * result = [[Get_upload_result alloc] init];
  [result setSuccess: [mService get_upload: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_upload"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_home_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_home_args * args = [[get_home_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_home_result * result = [[Get_home_result alloc] init];
  [result setSuccess: [mService get_home: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_home"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_top_user_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_top_user_args * args = [[get_top_user_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_top_user_result * result = [[Get_top_user_result alloc] init];
  [result setSuccess: [mService get_top_user: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_top_user"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_follow_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  follow_args * args = [[follow_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Follow_result * result = [[Follow_result alloc] init];
  [result setSuccess: [mService follow: [args request]]];
  [outProtocol writeMessageBeginWithName: @"follow"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_un_follow_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  un_follow_args * args = [[un_follow_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Un_follow_result * result = [[Un_follow_result alloc] init];
  [result setSuccess: [mService un_follow: [args request]]];
  [outProtocol writeMessageBeginWithName: @"un_follow"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_follow_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_follow_list_args * args = [[get_follow_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_follow_list_result * result = [[Get_follow_list_result alloc] init];
  [result setSuccess: [mService get_follow_list: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_follow_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_follower_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_follower_list_args * args = [[get_follower_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_follower_list_result * result = [[Get_follower_list_result alloc] init];
  [result setSuccess: [mService get_follower_list: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_follower_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_photo_like_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_photo_like_args * args = [[add_photo_like_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_photo_like_result * result = [[Add_photo_like_result alloc] init];
  [mService add_photo_like: [args request]];
  [outProtocol writeMessageBeginWithName: @"add_photo_like"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_photo_like_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_photo_like_args * args = [[delete_photo_like_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_photo_like_result * result = [[Delete_photo_like_result alloc] init];
  [mService delete_photo_like: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_photo_like"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_pocket_like_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_pocket_like_args * args = [[add_pocket_like_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_pocket_like_result * result = [[Add_pocket_like_result alloc] init];
  [mService add_pocket_like: [args request]];
  [outProtocol writeMessageBeginWithName: @"add_pocket_like"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_pocket_like_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_pocket_like_args * args = [[delete_pocket_like_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_pocket_like_result * result = [[Delete_pocket_like_result alloc] init];
  [mService delete_pocket_like: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_pocket_like"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_photo_recommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_photo_recommend_args * args = [[add_photo_recommend_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_photo_recommend_result * result = [[Add_photo_recommend_result alloc] init];
  [mService add_photo_recommend: [args request]];
  [outProtocol writeMessageBeginWithName: @"add_photo_recommend"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_photo_recommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_photo_recommend_args * args = [[delete_photo_recommend_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_photo_recommend_result * result = [[Delete_photo_recommend_result alloc] init];
  [mService delete_photo_recommend: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_photo_recommend"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_add_pocket_recommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_pocket_recommend_args * args = [[add_pocket_recommend_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_pocket_recommend_result * result = [[Add_pocket_recommend_result alloc] init];
  [mService add_pocket_recommend: [args request]];
  [outProtocol writeMessageBeginWithName: @"add_pocket_recommend"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_delete_pocket_recommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  delete_pocket_recommend_args * args = [[delete_pocket_recommend_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Delete_pocket_recommend_result * result = [[Delete_pocket_recommend_result alloc] init];
  [mService delete_pocket_recommend: [args request]];
  [outProtocol writeMessageBeginWithName: @"delete_pocket_recommend"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_put_stype_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  put_stype_args * args = [[put_stype_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Put_stype_result * result = [[Put_stype_result alloc] init];
  [mService put_stype: [args request]];
  [outProtocol writeMessageBeginWithName: @"put_stype"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_get_user_info_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  get_user_info_args * args = [[get_user_info_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Get_user_info_result * result = [[Get_user_info_result alloc] init];
  [result setSuccess: [mService get_user_info: [args request]]];
  [outProtocol writeMessageBeginWithName: @"get_user_info"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_modify_user_info_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  modify_user_info_args * args = [[modify_user_info_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Modify_user_info_result * result = [[Modify_user_info_result alloc] init];
  [result setSuccess: [mService modify_user_info: [args request]]];
  [outProtocol writeMessageBeginWithName: @"modify_user_info"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_search_photo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  search_photo_args * args = [[search_photo_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Search_photo_result * result = [[Search_photo_result alloc] init];
  [result setSuccess: [mService search_photo: [args request]]];
  [outProtocol writeMessageBeginWithName: @"search_photo"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_search_user_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  search_user_args * args = [[search_user_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Search_user_result * result = [[Search_user_result alloc] init];
  [result setSuccess: [mService search_user: [args request]]];
  [outProtocol writeMessageBeginWithName: @"search_user"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_hot_search_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  hot_search_args * args = [[hot_search_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Hot_search_result * result = [[Hot_search_result alloc] init];
  [result setSuccess: [mService hot_search: [args request]]];
  [outProtocol writeMessageBeginWithName: @"hot_search"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

